openapi: 3.0.3
info:
    title: Gravitee.io APIM - Management API - Environments
    description: |-
        This is the OpenAPI specification for our new version of APIM Management API.
    contact:
        email: team-apim@graviteesource.com
    license:
        name: Apache 2.0
        url: http://www.apache.org/licenses/LICENSE-2.0.html
    version: 2.0.0

security:
    - BasicAuth: []
    - CookieAuth: []

servers:
    - url: "/management/v2/environments/{envId}"
      description: APIM Management API v2 - Default base URL
      variables:
          envId:
              description: The unique ID of your environment
              default: DEFAULT
    - url: "/management/v2/organizations/{orgId}/environments/{envId}"
      description: APIM Management API v2 - Base URL to target specific organizations
      variables:
          orgId:
              description: The unique ID of your organization
              default: DEFAULT
          envId:
              description: The unique ID of your environment
              default: DEFAULT

tags:
    - name: SharedPolicyGroups
      description: Everything about shared policy groups
    - name: Scoring
      description: Everything about APIs scoring
    - name: Clusters
      description: Everything about clusters
    - name: Newt Ai
      description: Everything about Newt Ai

paths:
    # Environment Analytics
    /analytics/response-status-ranges:
        get:
            parameters:
                - $ref: "#/components/parameters/from"
                - $ref: "#/components/parameters/to"
            tags:
                - Environment Analytics
            summary: Get response status counts for v2 and v4 APIs from specified environment
            description: |-
                Get v2 and v4 API analytics response status counts. Response statuses are grouped by endpoint and status code hundreds.

            operationId: getDashboardResponseStatusCodes
            responses:
                "200":
                    $ref: "#/components/responses/EnvironmentAnalyticsResponseStatusRangesResponse"
                default:
                    $ref: "#/components/responses/Error"
    /analytics/top-hits:
        get:
            parameters:
                - $ref: "#/components/parameters/from"
                - $ref: "#/components/parameters/to"
            tags:
                - Environment Analytics
            summary: Get all v4 APIs with hits count per API sorted by mostly requested
            description: |-
                Get v4 API analytics top hits counts. All APIs are sorted starting from the most requested ones.

            operationId: getDashboardTopHits
            responses:
                "200":
                    $ref: "#/components/responses/EnvironmentAnalyticsTopHitsApisResponse"
                default:
                    $ref: "#/components/responses/Error"
    /analytics/request-response-time:
        get:
            parameters:
                - $ref: "#/components/parameters/from"
                - $ref: "#/components/parameters/to"
            tags:
                - Environment Analytics
            summary: V4 APIs request and response times analytics
            description: |-
                Get analytics for v2 & v4 APIs regarding number of requests, requests per second and response max, min and average times for 
                specified time range. Analytics contains data only for HTTP GET, HTTP POST and HTTP PROXY entrypoints.

            operationId: getDashboardRequestResponseTime
            responses:
                "200":
                    $ref: "#/components/responses/EnvironmentAnalyticsRequestResponseTimeResponse"
                default:
                    $ref: "#/components/responses/Error"
    /analytics/response-time-over-time:
        parameters:
            - $ref: "#/components/parameters/from"
            - $ref: "#/components/parameters/to"
        get:
            tags:
                - Environment Analytics
            summary: Get Environment Analytics average response time over time
            description: |-
                Get Environment Analytics average response time over time

                User must have the API_ANALYTICS[READ] permission.
            operationId: getEnvironmentResponseTimeOverTime
            responses:
                "200":
                    $ref: "#/components/responses/EnvironmentAnalyticsOverPeriodResponse"
    /analytics/response-status-overtime:
        parameters:
            - $ref: "#/components/parameters/from"
            - $ref: "#/components/parameters/to"
        get:
            tags:
                - API Analytics
            summary: Get Environment Analytics response status counts over time
            description: |-
                Get Environment analytics response status counts over time.

                User must have the API_ANALYTICS[READ] permission.
            operationId: getEnvironmentResponseStatusOvertime
            responses:
                "200":
                    $ref: "#/components/responses/EnvironmentAnalyticsResponseStatusOvertimeResponse"
                default:
                    $ref: "#/components/responses/Error"
    /analytics/top-apps-by-request-count:
        parameters:
            - $ref: "#/components/parameters/from"
            - $ref: "#/components/parameters/to"
        get:
            tags:
                - API Analytics
            summary: Get Environment Analytics for top applications by the request count
            description: |-
                Get Environment Analytics for top applications by the request count

                User must have the API_ANALYTICS[READ] permission.
            operationId: getEnvironmentTopAppByRequestCount
            responses:
                "200":
                    $ref: "#/components/responses/EnvironmentAnalyticsTopAppsByRequestCountResponse"
                default:
                    $ref: "#/components/responses/Error"
    /analytics/top-failed-apis:
        parameters:
            - $ref: "#/components/parameters/from"
            - $ref: "#/components/parameters/to"
        get:
            tags:
                - API Analytics
            summary: Get Environment Analytics for top failed v2 and v4 APIs
            description: |-
                Get Environment Analytics for top failed v2 and v4 APIs 

                User must have the API_ANALYTICS[READ] permission.
            operationId: getEnvironmentTopFailedApis
            responses:
                "200":
                    $ref: "#/components/responses/EnvironmentAnalyticsTopFailedApisResponse"
                default:
                    $ref: "#/components/responses/Error"
    # Shared policy group
    /shared-policy-groups:
        post:
            tags:
                - SharedPolicyGroups
            summary: Create a shared policy group
            operationId: createSharedPolicyGroup
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/CreateSharedPolicyGroup"
                required: true
            responses:
                "201":
                    description: Shared policy group created
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SharedPolicyGroup"
                default:
                    $ref: "#/components/responses/Error"
        get:
            tags:
                - SharedPolicyGroups
            summary: Search shared policy groups
            operationId: searchSharedPolicyGroups
            parameters:
                - $ref: "#/components/parameters/pageParam"
                - $ref: "#/components/parameters/perPageParam"
                - $ref: "#/components/parameters/sharedPolicyGroupSortByParam"
                - $ref: "#/components/parameters/sharedPolicyGroupSearchParam"
            responses:
                "200":
                    $ref: "#/components/responses/SharedPolicyGroupsResponse"
                default:
                    $ref: "#/components/responses/Error"
    /shared-policy-groups/policy-plugins:
        get:
            tags:
                - SharedPolicyGroups
            summary: Get all shared policy group for a policy plugin usage
            operationId: getPolicyPlugins
            responses:
                "200":
                    description: Shared policy group found
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/SharedPolicyGroupPolicyPlugin"
                default:
                    $ref: "#/components/responses/Error"
    /shared-policy-groups/{sharedPolicyGroupId}:
        get:
            tags:
                - SharedPolicyGroups
            summary: Get a shared policy group
            operationId: getSharedPolicyGroup
            parameters:
                - $ref: "#/components/parameters/sharedPolicyGroupId"
            responses:
                "200":
                    description: Shared policy group found
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SharedPolicyGroup"
                default:
                    $ref: "#/components/responses/Error"
        put:
            tags:
                - SharedPolicyGroups
            summary: Update a shared policy group
            operationId: updateSharedPolicyGroup
            parameters:
                - $ref: "#/components/parameters/sharedPolicyGroupId"
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/UpdateSharedPolicyGroup"
                required: true
            responses:
                "200":
                    description: Shared policy group updated
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SharedPolicyGroup"
                default:
                    $ref: "#/components/responses/Error"
        delete:
            tags:
                - SharedPolicyGroups
            summary: Delete a shared policy group
            operationId: deleteSharedPolicyGroup
            parameters:
                - $ref: "#/components/parameters/sharedPolicyGroupId"
            responses:
                "204":
                    description: Shared policy group deleted
                default:
                    $ref: "#/components/responses/Error"
    /shared-policy-groups/{sharedPolicyGroupId}/histories:
        get:
            tags:
                - SharedPolicyGroups
            summary: Get the histories of a shared policy group
            operationId: getSharedPolicyGroupHistories
            parameters:
                - $ref: "#/components/parameters/sharedPolicyGroupId"
                - $ref: "#/components/parameters/pageParam"
                - $ref: "#/components/parameters/perPageParam"
                - $ref: "#/components/parameters/sharedPolicyGroupHistoriesSortByParam"
            responses:
                "200":
                    $ref: "#/components/responses/SharedPolicyGroupHistoriesResponse"
                default:
                    $ref: "#/components/responses/Error"
    /shared-policy-groups/{sharedPolicyGroupId}/_deploy:
        post:
            tags:
                - SharedPolicyGroups
            summary: Deploy a shared policy group
            operationId: deploySharedPolicyGroup
            parameters:
                - $ref: "#/components/parameters/sharedPolicyGroupId"
            responses:
                "202":
                    description: Shared policy group deploy request has been accepted
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SharedPolicyGroup"
                default:
                    $ref: "#/components/responses/Error"
    /shared-policy-groups/{sharedPolicyGroupId}/_undeploy:
        post:
            tags:
                - SharedPolicyGroups
            summary: Undeploy a shared policy group
            operationId: undeploySharedPolicyGroup
            parameters:
                - $ref: "#/components/parameters/sharedPolicyGroupId"
            responses:
                "202":
                    description: Shared policy group undeploy request has been accepted
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SharedPolicyGroup"
                default:
                    $ref: "#/components/responses/Error"

    # Scoring
    /scoring/apis:
        get:
            tags:
                - Scoring
            summary: Get the scoring of all APIs
            operationId: getApisScoring
            parameters:
                - $ref: "#/components/parameters/pageParam"
                - $ref: "#/components/parameters/perPageParam"
            responses:
                "200":
                    $ref: "#/components/responses/EnvironmentApisScoringResponse"
                default:
                    $ref: "#/components/responses/Error"
    /scoring/overview:
        get:
            tags:
                - Scoring
            summary: Get Scoring Environment Overview
            operationId: getScoringEnvironmentOverview
            responses:
                "200":
                    description: Scoring overview of the environment
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/EnvironmentScoringOverview"
                default:
                    $ref: "#/components/responses/Error"
    /scoring/rulesets:
        post:
            tags:
                - Scoring
                - Rulesets
            summary: Create a new ruleset at environment level
            operationId: createEnvironmentRuleset
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/ImportScoringRuleset"
                required: true
            responses:
                "201":
                    description: Ruleset created
                default:
                    $ref: "#/components/responses/Error"
        get:
            tags:
                - Scoring
                - Rulesets
            summary: Get all rulesets at environment level
            operationId: getEnvironmentRulesets
            responses:
                "200":
                    $ref: "#/components/responses/ScoringRulesetsResponse"
                default:
                    $ref: "#/components/responses/Error"
    /scoring/rulesets/{rulesetId}:
        delete:
            tags:
                - Scoring
                - Rulesets
            summary: Delete a ruleset
            operationId: deleteEnvironmentRuleset
            parameters:
                - $ref: "#/components/parameters/rulesetId"
            responses:
                "204":
                    description: Ruleset deleted
                default:
                    $ref: "#/components/responses/Error"
        get:
            tags:
                - Scoring
                - Rulesets
            summary: Get a specific ruleset
            operationId: getEnvironmentRuleset
            parameters:
                - $ref: "#/components/parameters/rulesetId"
            responses:
                "200":
                    description: Scoring ruleset found
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ScoringRuleset"
                default:
                    $ref: "#/components/responses/Error"
        put:
            tags:
                - Scoring
                - Rulesets
            summary: Update ruleset
            operationId: updateEnvironmentRuleset
            parameters:
                - $ref: "#/components/parameters/rulesetId"
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/UpdateScoringRuleset"
                required: true
            responses:
                "200":
                    description: Ruleset updated
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ScoringRuleset"
                default:
                    $ref: "#/components/responses/Error"
    /scoring/functions:
        post:
            tags:
                - Scoring
                - Functions
            summary: Create a new scoring function at environment level
            operationId: createEnvironmentScoringFunction
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/ImportScoringFunction"
                required: true
            responses:
                "201":
                    description: Scoring functions created
                default:
                    $ref: "#/components/responses/Error"
        get:
            tags:
                - Scoring
                - Functions
            summary: Get all functions at environment level
            operationId: getEnvironmentScoringFunctions
            responses:
                "200":
                    $ref: "#/components/responses/ScoringFunctionsResponse"
                default:
                    $ref: "#/components/responses/Error"
    /scoring/functions/{scoringFunctionName}:
        delete:
            tags:
                - Scoring
                - Functions
            summary: Delete a scoring function
            operationId: deleteEnvironmentScoringFunction
            parameters:
                - $ref: "#/components/parameters/scoringFunctionName"
            responses:
                "204":
                    description: Scoring function deleted
                default:
                    $ref: "#/components/responses/Error"

    # Cluster
    /clusters:
      post:
        tags:
          - Clusters
        summary: Create a cluster
        description: |-
          User must have the ENVIRONMENT_CLUSTER[CREATE] permission.
        operationId: createCluster
        requestBody:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateCluster"
          required: true
        responses:
          "201":
            description: Cluster created
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Cluster"
          default:
            $ref: "#/components/responses/Error"
      get:
        tags:
          - Clusters
        summary: Search clusters
        description: |-
          User must have the ENVIRONMENT_CLUSTER[READ] permission.
        operationId: searchClusters
        parameters:
          - $ref: "#/components/parameters/pageParam"
          - $ref: "#/components/parameters/perPageParam"
          - $ref: "#/components/parameters/clusterSortByParam"
          - $ref: "#/components/parameters/clusterSearchParam"
        responses:
          "200":
            $ref: "#/components/responses/ClustersResponse"
          default:
            $ref: "#/components/responses/Error"
    /clusters/{clusterId}:
      parameters:
        - $ref: "#/components/parameters/clusterId"
      get:
        tags:
          - Clusters
        summary: Get a cluster
        description: |-
          User must have the CLUSTER_DEFINITION[READ] permission.
        operationId: getCluster
        responses:
          "200":
            description: Cluster found
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Cluster"
          default:
            $ref: "#/components/responses/Error"
      put:
        tags:
          - Clusters
        summary: Update a cluster
        description: |-
          User must have the CLUSTER_DEFINITION[UPDATE] permission.
        operationId: updateCluster
        requestBody:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateCluster"
          required: true
        responses:
          "200":
            description: Cluster updated
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Cluster"
          default:
            $ref: "#/components/responses/Error"
      delete:
        tags:
          - Clusters
        summary: Delete a cluster
        description: |-
          User must have the CLUSTER_DEFINITION[DELETE] permission.
        operationId: deleteCluster
        parameters:
          - $ref: "#/components/parameters/clusterId"
        responses:
          "204":
            description: Cluster deleted
          default:
            $ref: "#/components/responses/Error"
    /clusters/{clusterId}/groups:
      parameters:
        - $ref: "#/components/parameters/clusterId"
      put:
        tags:
          - Clusters
        summary: Update a cluster's groups
        description: |-
          User must have the CLUSTER_DEFINITION[UPDATE] permission.
        operationId: updateClusterGroups
        requestBody:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateClusterGroups"
          required: true
        responses:
          "200":
            description: Cluster groups updated
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/ClusterGroups"
          default:
            $ref: "#/components/responses/Error"
    /clusters/{clusterId}/permissions:
      parameters:
        - $ref: "#/components/parameters/clusterId"
      get:
        tags:
          - Clusters
        summary: Get cluster's permissions of current user
        operationId: getClusterPermissions
        responses:
          "200":
            $ref: "#/components/responses/ClusterPermissionsResponse"
          default:
            $ref: "#/components/responses/Error"

    # Cluster members
    /clusters/{clusterId}/members:
      parameters:
        - $ref: "#/components/parameters/clusterId"
      get:
        tags:
          - Clusters
        summary: Get cluster's members
        description: |-
          User must have the CLUSTER_MEMBER[READ] permission.
        operationId: getClusterMembers
        responses:
          "200":
            $ref: "#/components/responses/MembersResponse"
          default:
            $ref: "#/components/responses/Error"
      post:
        tags:
          - Clusters
        summary: Add a cluster member
        description: |-
          User must have the CLUSTER_MEMBER[CREATE] permission.
        operationId: addClusterMember
        requestBody:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddMember"
          required: true
        responses:
          "201":
            description: Member successfully added
          default:
            $ref: "#/components/responses/Error"
    /clusters/{clusterId}/members/{memberId}:
      parameters:
        - $ref: "#/components/parameters/clusterId"
        - $ref: "#/components/parameters/memberId"
      put:
        tags:
          - Clusters
        summary: Update a cluster's member
        operationId: updateClusterMember
        description: |-
          User must have the CLUSTER_MEMBER[UPDATE] permission.
        requestBody:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateMember"
          required: true
        responses:
          "200":
            description: Updated member
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Member"
          default:
            $ref: "#/components/responses/Error"
      delete:
        tags:
          - Clusters
        summary: Delete a cluster's member
        description: |-
          User must have the CLUSTER_MEMBER[DELETE] permission.
        operationId: deleteClusterMember
        responses:
          "204":
            description: Member removed
          default:
            $ref: "#/components/responses/Error"
    /clusters/{clusterId}/members/_transfer-ownership:
      parameters:
        - $ref: "#/components/parameters/clusterId"
      post:
        tags:
          - Clusters
        summary: Transfer cluster ownership
        description: |-
          Transfer the ownership of the Cluster to a user, a group or an cluster member.
          
          Return a 404 HTTP Error if Cluster cannot be found.
          
          User must have the CLUSTER_MEMBER[UPDATE] permission.
        operationId: transferClusterOwnership
        requestBody:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterTransferOwnership"
          required: true
        responses:
          "204":
            description: Ownership has been transferred successfully
          default:
            $ref: "#/components/responses/Error"

    # NewAI
    /newtai/el/_generate:
      post:
        tags:
          - Newt Ai
        summary: Generate Expression Language
        description: |-
          Generate Expression Language.
        operationId: generateEl
        requestBody:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenerateExpressionLanguage"
          required: true
        responses:
          "200":
            $ref: "#/components/responses/GenerateExpressionLanguageResponse"
          default:
            $ref: "#/components/responses/Error"

    # Instances
    /instances/{instanceId}:
      get:
        tags:
          - Instances
        summary: Get a Gateway instance details
        operationId: getInstanceById
        parameters:
            - $ref: "#/components/parameters/instanceId"
        responses:
          "200":
            $ref: "#/components/responses/InstanceDetailResponse"
          default:
            $ref: "#/components/responses/Error"

    # Portal pages
    /portal-pages/_homepage:
      get:
        tags:
          - Portal Pages
        summary: Get portal homepage
        operationId: getPortalHomepage
        responses:
          "200":
            $ref: "#/components/responses/GetPortalHomepageResponse"
          default:
            $ref: "#/components/responses/Error"

components:
    schemas:
        # Analytics
        TopHitApi:
            type: object
            properties:
                id:
                    type: string
                    description: The API ID
                    example: 00f8c9e7-78fc-4907-b8c9-e778fc790750
                name:
                    type: string
                    description: The API Name
                    example: Sample API Name
                count:
                    type: integer
                    format: int64
                    description: The API Hit count
                    example: 675234
                definitionVersion:
                    type: string
                    description: The API definition version
                    example: v4
        AnalyticTimeRange:
            type: object
            description: A Time range
            properties:
                from:
                    type: integer
                    format: int64
                    description: The timestamp starting the time range
                    example: 1621339200000
                to:
                    type: integer
                    format: int64
                    description: The timestamp ending the time range
                    example: 1621425600000
                interval:
                    type: integer
                    format: int64
                    description: The interval in milliseconds splitting the data
                    example: 120000
        TopApp:
            type: object
            properties:
                id:
                    type: string
                    description: The Application ID
                    example: 00f8c9e7-78fc-4907-b8c9-e778fc790750
                name:
                    type: string
                    description: The Application Name
                    example: Sample Application Name
                count:
                    type: integer
                    format: int64
                    description: The Application Hit count
                    example: 675234
        TopFailedApis:
            type: object
            properties:
                id:
                    type: string
                    description: The Application ID
                    example: 00f8c9e7-78fc-4907-b8c9-e778fc790750
                definitionVersion:
                    type: string
                    description: The API definition version
                    example: v4
                name:
                    type: string
                    description: The Application Name
                    example: Sample Application Name
                failedCalls:
                    type: integer
                    format: int64
                    description: Number of 5xx calls for the API
                    example: 2137
                failedCallsRatio:
                    type: number
                    format: double
                    description: Ratio of failed API calls to the total number of calls
                    example: 0.8

        # Shared policy group
        CreateSharedPolicyGroup:
            type: object
            description: Create payload for a shared policy group
            properties:
                crossId:
                    type: string
                    description: The unique ID of the shared policy group
                    example: 5e2b3b3b-3b3b-3b3b-3b3b-3b3b3b3b3b3b
                name:
                    type: string
                    description: The name of the shared policy group
                    example: My Shared Policy Group
                    maxLength: 512
                description:
                    type: string
                    description: The description of the shared policy group
                    example: This is a shared policy group
                    maxLength: 1024
                prerequisiteMessage:
                    type: string
                    description: The prerequisite message of the shared policy group. This message is displayed to the user to help understand the prerequisite to use the shared policy group.
                    example: The resource cache "my-cache" is required
                    maxLength: 1024
                apiType:
                    $ref: "#/components/schemas/ApiType"
                originContext:
                    $ref: "#/components/schemas/BaseOriginContext"
                phase:
                    $ref: "#/components/schemas/FlowPhase"
                steps:
                    type: array
                    description: The list of steps (policies) in the shared policy group
                    items:
                        $ref: "#/components/schemas/StepV4"
            required: ["name", "apiType", "phase"]
        UpdateSharedPolicyGroup:
            type: object
            description: Update payload for a shared policy group
            properties:
                crossId:
                    type: string
                    description: The unique ID of the shared policy group
                    example: 5e2b3b3b-3b3b-3b3b-3b3b-3b3b3b3b3b3b
                name:
                    type: string
                    description: The name of the shared policy group
                    example: My Shared Policy Group
                    maxLength: 512
                description:
                    type: string
                    description: The description of the shared policy group
                    example: This is a shared policy group
                    maxLength: 1024
                prerequisiteMessage:
                    type: string
                    description: The prerequisite message of the shared policy group. This message is displayed to the user to help understand the prerequisite to use the shared policy group.
                    example: The resource cache "my-cache" is required
                    maxLength: 1024
                steps:
                    type: array
                    description: The list of steps (policies) in the shared policy group
                    items:
                        $ref: "#/components/schemas/StepV4"
        SharedPolicyGroup:
            type: object
            description: A shared policy group
            properties:
                id:
                    type: string
                    description: The unique ID of the shared policy group
                crossId:
                    type: string
                    description: The unique ID of the shared policy group
                    example: 5e2b3b3b-3b3b-3b3b-3b3b-3b3b3b3b3b3b
                name:
                    type: string
                    description: The name of the shared policy group
                    example: My Shared Policy Group
                    maxLength: 512
                description:
                    type: string
                    description: The description of the shared policy group
                    example: This is a shared policy group
                    maxLength: 1024
                prerequisiteMessage:
                    type: string
                    description: The prerequisite message of the shared policy group. This message is displayed to the user to help understand the prerequisite to use the shared policy group.
                    example: The resource cache "my-cache" is required
                    maxLength: 1024
                version:
                    type: number
                    description: The version of the shared policy group
                    example: 1
                apiType:
                    $ref: "#/components/schemas/ApiType"
                originContext:
                    $ref: "#/components/schemas/BaseOriginContext"
                steps:
                    type: array
                    description: The list of steps (policies) in the shared policy group
                    items:
                        $ref: "#/components/schemas/StepV4"
                phase:
                    $ref: "#/components/schemas/FlowPhase"
                deployedAt:
                    type: string
                    format: date-time
                    description: The date at which the shared policy group was deployed
                    example: 2020-01-01T00:00:00Z
                createdAt:
                    type: string
                    format: date-time
                    description: The date at which the shared policy group was created
                    example: 2020-01-01T00:00:00Z
                updatedAt:
                    type: string
                    format: date-time
                    description: The date at which the shared policy group was last updated
                    example: 2020-01-01T00:00:00Z
                lifecycleState:
                    $ref: "#/components/schemas/SharedPolicyGroupLifecycleState"
        SharedPolicyGroupPolicyPlugin:
            type: object
            description: A shared policy group for a policy plugin
            properties:
                id:
                    type: string
                    description: The unique ID of the shared policy group
                policyId:
                    type: string
                    description: The id of shared-policy-group plugin
                name:
                    type: string
                    description: The name of the shared policy group
                    example: My Shared Policy Group
                    maxLength: 512
                description:
                    type: string
                    description: The description of the shared policy group
                    example: This is a shared policy group
                    maxLength: 1024
                prerequisiteMessage:
                    type: string
                    description: The prerequisite message of the shared policy group. This message is displayed to the user to help understand the prerequisite to use the shared policy group.
                    example: The resource cache "my-cache" is required
                    maxLength: 1024
                apiType:
                    $ref: "#/components/schemas/ApiType"
                phase:
                    $ref: "#/components/schemas/FlowPhase"
        SharedPolicyGroupLifecycleState:
            type: string
            description: The lifecycle state of a shared policy group
            example: DEPLOYED
            enum:
                - DEPLOYED
                - UNDEPLOYED
                - PENDING

        # Cluster
        CreateCluster:
            type: object
            properties:
                name:
                    type: string
                description:
                    type: string
                configuration:
                    type: object
            required: [ "name", "configuration" ]
        Cluster:
            type: object
            properties:
                id:
                    type: string
                createdAt:
                    type: string
                    format: date-time
                updatedAt:
                    type: string
                    format: date-time
                name:
                    type: string
                description:
                    type: string
                configuration:
                    type: object
                groups:
                  type: array
                  items:
                    type: string
        UpdateCluster:
            type: object
            properties:
                name:
                    type: string
                description:
                    type: string
                configuration:
                    type: object
        ClusterGroups:
            type: array
            items:
                type: string
        UpdateClusterGroups:
            type: array
            items:
                type: string
        ClusterTransferOwnership:
          type: object
          properties:
            newPrimaryOwnerId:
              type: string
              description: The new primary owner ID (user's technical identifier). Can be null if userReference is defined.
            userReference:
              type: string
              description: The new primary owner reference (user's reference provided by an identity provider). Can be null if userId is defined.
            currentPrimaryOwnerNewRole:
              type: string
              description: The name of the role that will be assigned to the current primary owner after the transfer.

        # Scoring
        EnvironmentApiScore:
            type: object
            description: The scoring result of an API
            properties:
                id:
                    type: string
                    description: API identifier
                name:
                    type: string
                    description: API name
                pictureUrl:
                    type: string
                    description: The URL to the API's picture
                score:
                    type: number
                    description: The average score of all assets of API
                    example: 0.74
                errors:
                    type: integer
                    description: The total number of violated rules with severity ERROR for all assets.
                    example: 10
                warnings:
                    type: integer
                    description: The total number of violated rules with severity WARN for all assets.
                    example: 20
                infos:
                    type: integer
                    description: The total number of violated rules with severity INFO for all assets.
                    example: 30
                hints:
                    type: integer
                    description: The total number of violated rules with severity HINT for all assets.
                    example: 40
        EnvironmentScoringOverview:
            type: object
            description: The scoring overview of an Environment
            properties:
                id:
                    type: string
                    description: Environment identifier
                score:
                    type: number
                    description: The average score of all APIs
                    example: 0.74
                errors:
                    type: integer
                    description: The total number of violated rules with severity ERROR for all APIs.
                    example: 10
                warnings:
                    type: integer
                    description: The total number of violated rules with severity WARN for all APIs.
                    example: 20
                infos:
                    type: integer
                    description: The total number of violated rules with severity INFO for all APIs.
                    example: 30
                hints:
                    type: integer
                    description: The total number of violated rules with severity HINT for all APIs.
                    example: 40
        ImportScoringRuleset:
            type: object
            description: The scoring ruleset to import
            properties:
                name:
                    type: string
                    minLength: 1
                    description: The name of ruleset
                description:
                    type: string
                    description: The description of ruleset
                payload:
                    type: string
                    minLength: 1
                    description: The ruleset payload
                format:
                    $ref: "#/components/schemas/ScoringAssetFormat"
            required:
                - name
                - payload
                - format
        UpdateScoringRuleset:
            type: object
            description: The scoring ruleset to update
            properties:
                name:
                    type: string
                    description: The name of ruleset
                description:
                    type: string
                    description: The description of ruleset
            required: ["name"]
        ScoringRuleset:
            type: object
            description: A scoring ruleset
            properties:
                id:
                    type: string
                    description: The id of ruleset
                name:
                    type: string
                    description: The name of ruleset
                description:
                    type: string
                    description: The description of ruleset
                payload:
                    type: string
                    description: The ruleset payload
                format:
                    $ref: "#/components/schemas/ScoringAssetFormat"
                createdAt:
                    type: string
                    format: date-time
                    description: The date at which the ruleset was created
                    example: 2020-01-01T00:00:00Z
                updatedAt:
                    type: string
                    format: date-time
                    description: The date at which the ruleset was updated
                    example: 2020-01-01T00:00:00Z
                referenceId:
                    type: string
                    description: The reference Id of ruleset
                referenceType:
                    $ref: "#/components/schemas/ScoringRulesetReferenceType"
        ScoringRulesetReferenceType:
            type: string
            enum:
                - ENVIRONMENT
        ScoringAssetFormat:
            type: string
            description: The format of scoring asset
            enum:
                - GRAVITEE_FEDERATION
                - GRAVITEE_MESSAGE
                - GRAVITEE_PROXY
                - GRAVITEE_NATIVE
                - GRAVITEE_V2
                - OPENAPI
                - ASYNCAPI
        ImportScoringFunction:
            type: object
            description: The scoring scoring function to import
            properties:
                name:
                    $ref: "#/components/schemas/ScoringFunctionName"
                payload:
                    type: string
                    description: The scoring function payload
        ScoringFunction:
            type: object
            description: A scoring ruleset
            properties:
                name:
                    $ref: "#/components/schemas/ScoringFunctionName"
                payload:
                    type: string
                    description: The ruleset payload
                createdAt:
                    type: string
                    format: date-time
                    description: The date at which the ruleset was created
                    example: 2020-01-01T00:00:00Z
                referenceId:
                    type: string
                    description: The reference Id of ruleset
                referenceType:
                    $ref: "#/components/schemas/ScoringFunctionReferenceType"
        ScoringFunctionReferenceType:
            type: string
            enum:
                - ENVIRONMENT
        ScoringFunctionName:
            type: string
            pattern: '^[^/]+\.js$'
            description: The name of ruleset

        ApiType:
            type: string
            description: API's type.
            example: MESSAGE
            enum:
                - MESSAGE
                - PROXY
                - NATIVE
        OriginContext:
            oneOf:
                - $ref: "#/components/schemas/ManagementOriginContext"
                - $ref: "#/components/schemas/KubernetesOriginContext"
                - $ref: "#/components/schemas/IntegrationOriginContext"
            discriminator:
                propertyName: origin
                mapping:
                    MANAGEMENT: "#/components/schemas/ManagementOriginContext"
                    KUBERNETES: "#/components/schemas/KubernetesOriginContext"
                    INTEGRATION: "#/components/schemas/IntegrationOriginContext"
        BaseOriginContext:
            type: object
            properties:
                origin:
                    type: string
                    description: The origin of the API.
                    example: MANAGEMENT
                    enum:
                        - MANAGEMENT
                        - KUBERNETES
                        - INTEGRATION
            discriminator:
                propertyName: origin
                mapping:
                    MANAGEMENT: "#/components/schemas/ManagementOriginContext"
                    KUBERNETES: "#/components/schemas/KubernetesOriginContext"
                    INTEGRATION: "#/components/schemas/IntegrationOriginContext"
        ManagementOriginContext:
            type: object
            title: "ManagementOriginContext"
            description: Indicates the API has been created by the Management API
            allOf:
                - $ref: "#/components/schemas/BaseOriginContext"
        KubernetesOriginContext:
            type: object
            title: "KubernetesOriginContext"
            description: Indicates the API has been created by the Gravitee Kubernetes Operator
            allOf:
                - $ref: "#/components/schemas/BaseOriginContext"
                - properties:
                      mode:
                          type: string
                          description: |-
                              The mode of the API.
                              fully_managed: Mode indicating the api is fully managed by the origin and so, only the origin should be able to manage the api.
                          example: FULLY_MANAGED
                          enum:
                              - FULLY_MANAGED
                      syncFrom:
                          type: string
                          description: |-
                              syncFrom stands for where the Gateway should source the API definition from. 
                              If the value is KUBERNETES, then the gateway will sync the definition by listening to changes
                              issued on a kubernetes config map. If the value is MANAGEMENT, then the gateway will sync
                              the definition using the same datastore as APIM. 
                              Defining MANAGEMENT as source for sync is useful e.g. when a single operator should operate
                              on gateways deployed on multiple kubernetes clusters.
                          example: MANAGEMENT
                          enum:
                              - MANAGEMENT
                              - KUBERNETES
        IntegrationOriginContext:
            type: object
            title: "IntegrationOriginContext"
            description: Indicates the API has been created through an Integration
            allOf:
                - $ref: "#/components/schemas/BaseOriginContext"
                - properties:
                      integrationId:
                          type: string
                          description: |-
                              The id of the integration that created the API.
                          example: b300b445-8bbb-4034-865c-d2113ba5b768
                      provider:
                          type: string
                          description: Provider of this Federated API.
                          example: solace
                      integrationName:
                          type: string
                          description: Name of integration of this Federated API.
                          example: My Solace env
        FlowPhase:
            type: string
            description: The execution phase of a policy.
            example: REQUEST
            enum:
                - REQUEST
                - RESPONSE
                - INTERACT
                - CONNECT
                - PUBLISH
                - SUBSCRIBE
        BaseStep:
            type: object
            properties:
                name:
                    type: string
                    description: The name of the step
                description:
                    type: string
                    description: The description of the step
                enabled:
                    type: boolean
                    description: Is the step enabled or not.
                    default: true
                policy:
                    type: string
                    description: The policy of the step
                configuration:
                    type: object
                    description: The configuration of the step
                condition:
                    type: string
                    description: The condition of the step
        StepV4:
            allOf:
                - $ref: "#/components/schemas/BaseStep"
                - properties:
                      messageCondition:
                          type: string
                          description: The message condition of the step

        # Members (Shared by api, cluster, integration, ...)
        Role:
          type: object
          properties:
            name:
              type: string
              description: Role's name.
              example: OWNER
            scope:
              $ref: "#/components/schemas/RoleScope"
        RoleScope:
          type: string
          description: Scope of a role.
          enum:
            - API
            - APPLICATION
            - GROUP
            - ENVIRONMENT
            - ORGANIZATION
            - PLATFORM
            - INTEGRATION
            - CLUSTER
        Member:
          type: object
          properties:
            id:
              type: string
              description: Member's uuid.
              example: 00f8c9e7-78fc-4907-b8c9-e778fc790750
            displayName:
              type: string
              description: Member's name.
              example: John Doe
              minLength: 1
            roles:
              type: array
              items:
                $ref: "#/components/schemas/Role"
              description: The list of roles for this Member.
        AddMember:
          type: object
          description: Membership can be created for existing users, or for users provided by external identity provider. Thus, either userId or externalReference are required.
          properties:
            userId:
              type: string
              description: Technical identifier for existing user.
            externalReference:
              type: string
              description: User's reference for user provided from an identity provider.
            roleName:
              type: string
              description: The name of the role
              minLength: 1
          required: [roleName]
        UpdateMember:
          type: object
          properties:
            roleName:
              type: string
              description: The name of the role
              minLength: 1
          required: [roleName]

        Error:
            type: object
            properties:
                httpStatus:
                    type: integer
                    format: int32
                    description: The error code
                    example: 400
                message:
                    type: string
                    description: The error message
                    example: Bad request
                technicalCode:
                    type: string
                    description: A technical code to identify the error
                    example: invalid.import.definition
                parameters:
                    type: object
                    description: A map of parameters to be used in the error message
                    additionalProperties:
                        type: string
                details:
                    type: array
                    description: A list of details about the error
                    items:
                        type: object
                        properties:
                            message:
                                type: string
                                description: The error message
                                example: Bad request
                            location:
                                type: string
                                description: The json path of the field in error.
                                example: updateApi.properties[0].key
                            invalidValue:
                                description: The invalid value.
        Pagination:
            description: Generic object to handle pagination data.
            type: object
            properties:
                page:
                    type: integer
                    description: The current page.
                perPage:
                    type: integer
                    description: The number of items requested per page.
                pageCount:
                    type: integer
                    description: The total number of pages.
                pageItemsCount:
                    type: integer
                    description: The number of items for the current page.
                totalCount:
                    type: integer
                    format: int64
                    description: The total number of items.
        Links:
            description: List of links for pagination
            properties:
                self:
                    type: string
                    description: Link to current resource
                first:
                    type: string
                    description: In a paginated response, link to the first page
                last:
                    type: string
                    description: In a paginated response, link to the last page
                previous:
                    type: string
                    description: In a paginated response, link to the previous page. Maybe null if current is the first page
                next:
                    type: string
                    description: In a paginated response, link to the next page. Maybe null if current is the last page
        ResponseMetadata:
          description: Generic object to handle additional information about an entity. Can also be used for pagination data.
          type: object

        FeedbackRequestId:
          description: newt AI feedback request id.
          type: object
          properties:
            chatId:
              type: string
            userMessageId:
              type: string
            agentMessageId:
              type: string
        GenerateExpressionLanguage:
          type: object
          description: Request an expression language generation
          required:
            - message
            - context
          properties:
            message:
              description: Prompt of generation.
              type: string
            context:
              description: Context to improve the generation.
              type: object
              properties:
                apiId:
                  type: string
                  description: The API identifier if relevant.

    parameters:
        pageParam:
            name: page
            in: query
            required: false
            description: The page number for pagination.
            schema:
                type: integer
                default: 1
        perPageParam:
            name: perPage
            in: query
            required: false
            description: |
                The number of items per page for pagination.
            schema:
                type: integer
                default: 10
        from:
            name: from
            in: query
            required: false
            description: |
                The timestamp in ms from which the logs will be returned.
            schema:
                type: integer
                format: int64
        to:
            name: to
            in: query
            required: false
            description: |
                The timestamp in ms to which the logs will be returned.
            schema:
                type: integer
                format: int64

        # Members (Shared by api, cluster, integration, ...)
        memberId:
          name: memberId
          in: path
          required: true
          description: Id of an API member.
          schema:
            type: string

        # Shared policy group
        sharedPolicyGroupId:
            name: sharedPolicyGroupId
            in: path
            description: The unique ID of the shared policy group
            required: true
            schema:
                type: string
        sharedPolicyGroupSortByParam:
            name: sortBy
            in: query
            required: false
            description: |-
                Possibility to sort Shared Policy Group results by field.
                Can be ascending or descending with minus '-' prefix.
                By default, no sort is applied.
            schema:
                type: string
                example: name
                enum:
                    - name
                    - -name
                    - apiType
                    - -apiType
                    - phase
                    - -phase
                    - updatedAt
                    - -updatedAt
                    - deployedAt
                    - -deployedAt
        sharedPolicyGroupSearchParam:
            name: q
            in: query
            description: |-
                A search query to filter shared policy groups.
            schema:
                type: string
                example: my shared policy group
        sharedPolicyGroupHistoriesSortByParam:
            name: sortBy
            in: query
            required: false
            description: |-
                Possibility to sort Shared Policy Group history results by field.
                Can be ascending or descending with minus '-' prefix.
                By default, no sort is applied.
            schema:
                type: string
                example: name
                enum:
                    - version
                    - -version
                    - updatedAt
                    - -updatedAt
                    - deployedAt
                    - -deployedAt

        # Scoring
        rulesetId:
            name: rulesetId
            in: path
            description: The unique ID of ruleset
            required: true
            schema:
                type: string
        scoringFunctionName:
            name: scoringFunctionName
            in: path
            description: The name of scoring function
            required: true
            schema:
                $ref: "#/components/schemas/ScoringFunctionName"

        # Cluster
        clusterId:
          name: clusterId
          in: path
          description: The unique ID of the cluster
          required: true
          schema:
            type: string
        clusterSortByParam:
          name: sortBy
          in: query
          required: false
          description: |-
            Possibility to sort Cluster results by field.
            Can be ascending or descending with minus '-' prefix.
            By default, it is sorted by name.
          schema:
            type: string
            example: name
            enum:
              - name
              - -name
              - createdAt
              - -createdAt
              - updatedAt
              - -updatedAt
        clusterSearchParam:
            name: q
            in: query
            description: |-
                A search query to filter clusters.
            schema:
                type: string
                example: my cluster

        # Instances
        instanceId:
          name: instanceId
          in: path
          description: The gateway instance ID
          required: true
          schema:
            type: string

    responses:
        SchemaFormResponse:
            description: Schema form of a plugin
            content:
                application/json:
                    schema:
                        type: object
        Error:
          description: Generic error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

        # Members (Shared by api, cluster, integration, ...)
        MembersResponse:
          description: Page of members
          content:
            application/json:
              schema:
                title: "MembersResponse"
                properties:
                  data:
                    description: List of members.
                    type: array
                    items:
                      $ref: "#/components/schemas/Member"
                  links:
                    $ref: "#/components/schemas/Links"
                  metadata:
                    $ref: "#/components/schemas/ResponseMetadata"
                  pagination:
                    $ref: "#/components/schemas/Pagination"

        # Shared policy group
        SharedPolicyGroupsResponse:
            description: Page of shared policy groups
            content:
                application/json:
                    schema:
                        title: "SharedPolicyGroupsResponse"
                        properties:
                            data:
                                description: List of SharedPolicyGroup.
                                type: array
                                items:
                                    $ref: "#/components/schemas/SharedPolicyGroup"
                            pagination:
                                $ref: "#/components/schemas/Pagination"
                            links:
                                $ref: "#/components/schemas/Links"
        SharedPolicyGroupHistoriesResponse:
            description: Page of shared policy group histories
            content:
                application/json:
                    schema:
                        title: "SharedPolicyGroupHistoriesResponse"
                        properties:
                            data:
                                description: List of SharedPolicyGroup.
                                type: array
                                items:
                                    $ref: "#/components/schemas/SharedPolicyGroup"
                            pagination:
                                $ref: "#/components/schemas/Pagination"
                            links:
                                $ref: "#/components/schemas/Links"

        # Cluster
        ClustersResponse:
            description: Page of clusters
            content:
                application/json:
                    schema:
                        title: "ClustersResponse"
                        properties:
                            data:
                                description: List of Clusters.
                                type: array
                                items:
                                    $ref: "#/components/schemas/Cluster"
                            pagination:
                                $ref: "#/components/schemas/Pagination"
                            links:
                                $ref: "#/components/schemas/Links"
        ClusterPermissionsResponse:
          description: Permissions response
          content:
            application/json:
              schema:
                title: "PermissionsResponse"
                properties:
                  data:
                    description: Key/Value list of permissions. The key is the permission name and the value is the permission CRUD value.
                    example: { "DEFINITION": "CRUD", "MEMBER": "R" }
                    type: object
                    additionalProperties:
                      type: string

        # Analytics
        EnvironmentAnalyticsResponseStatusRangesResponse:
            description: Analytics for status codes by entrypoint at environment level
            content:
                application/json:
                    schema:
                        title: "EnvironmentAnalyticsResponseStatusRangesResponse"
                        description: Environment level API Analytics for status codes by entrypoint.
                        properties:
                            ranges:
                                type: object
                                description: Global status ranges
                                additionalProperties:
                                    description: A map of response status range and counts
                                    type: number
                                example:
                                    100.0-200.0:
                                        value: 5
                                    200.0-300.0:
                                        value: 357
                                    300.0-400.0:
                                        value: 0
                                    400.0-500.0:
                                        value: 0
                                    500.0-600.0:
                                        value: 0
        EnvironmentAnalyticsTopHitsApisResponse:
            description: Analytics for v2 and v4 top hits APIs at environment level
            content:
                application/json:
                    schema:
                        title: "EnvironmentAnalyticsTopHitsApisResponse"
                        description: Analytics for top hits APIs at environment level
                        properties:
                            data:
                                type: array
                                description: List of top hit results
                                items:
                                    $ref: "#/components/schemas/TopHitApi"
        EnvironmentAnalyticsRequestResponseTimeResponse:
            description: Analytics for request response times at environment level
            content:
                application/json:
                    schema:
                        title: "EnvironmentAnalyticsRequestResponseTimeResponse"
                        description: Analytics for top hits APIs at environment level
                        properties:
                            requestsPerSecond:
                                type: number
                                format: double
                                description: Number of requests per second
                                example: 0.7
                            requestsTotal:
                                type: number
                                format: int64
                                description: Total number of requests
                                example: 3567
                            responseMinTime:
                                type: number
                                format: double
                                description: Response minimum time in ms
                                example: 32.23
                            responseMaxTime:
                                type: number
                                format: double
                                description: Response maximum time in ms
                                example: 7240.11
                            responseAvgTime:
                                type: number
                                format: double
                                description: Response average time in ms
                                example: 89.2
        EnvironmentAnalyticsOverPeriodResponse:
            description: Analytics for number over period
            content:
                application/json:
                    schema:
                        title: "EnvironmentAnalyticsOverPeriodResponse"
                        description: Environment Analytics integer data point on a period.
                        properties:
                            timeRange:
                                $ref: "#/components/schemas/AnalyticTimeRange"
                            data:
                                type: array
                                description: Response time average (in milliseconds) over time
                                items:
                                    type: integer
                                    format: int64
                                    minimum: 0
                                    exclusiveMinimum: true
        EnvironmentAnalyticsResponseStatusOvertimeResponse:
            description: Analytics for status codes over time
            content:
                application/json:
                    schema:
                        title: "EnvironmentAnalyticsResponseStatusOvertimeResponse"
                        description: Environment Analytics for status codes over time.
                        properties:
                            timeRange:
                                $ref: "#/components/schemas/AnalyticTimeRange"
                            data:
                                type: object
                                description: Status count overt time
                                additionalProperties:
                                    description: A map of response status and counts
                                    type: array
                                    items:
                                        type: integer
                                        format: int64
        EnvironmentAnalyticsTopAppsByRequestCountResponse:
            description: Analytics for v2 and v4 top applications by the request count
            content:
                application/json:
                    schema:
                        title: "EnvironmentAnalyticsTopAppsByRequestCountResponse"
                        description: Analytics for top applications by the request count
                        properties:
                            data:
                                type: array
                                description: List of top application results
                                items:
                                    $ref: "#/components/schemas/TopApp"
        EnvironmentAnalyticsTopFailedApisResponse:
            description: Analytics for top failed v2 and v4 APIs based on 5xx status calls
            content:
                application/json:
                    schema:
                        title: "EnvironmentAnalyticsTopFailedApisResponse"
                        description: Analytics for top failed v2 and v4 APIs based on 5xx status calls
                        properties:
                            data:
                                type: array
                                description: List of top failed APIs results
                                items:
                                    $ref: "#/components/schemas/TopFailedApis"

        # Scoring
        EnvironmentApisScoringResponse:
            description: Page of Apis Scoring
            content:
                application/json:
                    schema:
                        title: "EnvironmentApisScoringResponse"
                        properties:
                            data:
                                description: List of EnvironmentApiScoreSummary.
                                type: array
                                items:
                                    $ref: "#/components/schemas/EnvironmentApiScore"
                            pagination:
                                $ref: "#/components/schemas/Pagination"
                            links:
                                $ref: "#/components/schemas/Links"
        ScoringRulesetsResponse:
            description: Scoring rulesets list
            content:
                application/json:
                    schema:
                        title: "ScoringRulesetsResponse"
                        properties:
                            data:
                                description: List of rulesets.
                                type: array
                                items:
                                    $ref: "#/components/schemas/ScoringRuleset"
        ScoringFunctionsResponse:
            description: Scoring functions list
            content:
                application/json:
                    schema:
                        title: "ScoringFunctionsResponse"
                        properties:
                            data:
                                description: List of rulesets.
                                type: array
                                items:
                                    $ref: "#/components/schemas/ScoringFunction"

        # NewAI
        GenerateExpressionLanguageResponse:
          description: Response an expression language generation
          content:
            application/json:
              schema:
                title: "GenerateExpressionLanguageResponse"
                properties:
                  message:
                    description: Expression language generated.
                    type: string
                  feedbackRequestId:
                    $ref: '#/components/schemas/FeedbackRequestId'


        # Instances
        InstanceDetailResponse:
          description: The gateway instance details.
          content:
            application/json:
              schema:
                title: "InstanceDetailResponse"
                properties:
                  id:
                    type: string
                    description: Gateway's uuid.
                    example: 00f8c9e7-78fc-4907-b8c9-e778fc790750
                  hostname:
                    type: string
                    description: Gateway's hostname.
                    example: my-gateway.example.com
                  ip:
                    type: string
                    description: Gateway's ip.
                    example: 10.0.1.123

        GetPortalHomepageResponse:
          description: List of portal pages for a given context
          content:
            application/json:
              schema:
                title: "GetPortalHomepageResponse"
                properties:
                  id:
                    type: string
                    description: The unique ID of the portal page
                  content:
                    type: string
                    description: Page contents
                  type:
                    type: string
                    description: Content type
                    enum:
                      - gravitee_markdown
                  context:
                    type: string
                    description: The portal context (eg. "homepage", "api_list")
                    enum: [homepage]
                  published:
                    type: boolean
                    description: Whether the page is published or not

    securitySchemes:
        BasicAuth:
            type: http
            scheme: basic
        CookieAuth:
            type: apiKey
            in: cookie
            name: Auth-Graviteeio-APIM
