# Copyright (C) 2015 The Gravitee team (http://gravitee.io)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
openapi: 3.1.0
info:
  title: Gravitee.io - Automation API
  description: The APIM automation API.
  contact:
    name: DevX team
    email: team-gko@graviteesource.com
    url: https://www.gravitee.io/
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
security:
  - BearerAuth: []
  - BasicAuth: []
  - CloudAuth: []
servers:
  - url: "https://eu.cloudgate.gravitee.io/apim/automation"
tags:
  - name: APIs
    description: Everything about APIs
  - name: Applications
    description: Everything about Applications
  - name: Shared Policy Group
    description: Everything about Shared Policy Groups
  - name: Subscriptions
    description: Everything about subscriptions
paths:
  # APIs
  /organizations/{orgId}/environments/{envId}/apis:
    put:
      operationId: createOrUpdateApis
      tags:
        - APIs
      summary: Create or update APIs from APISpec
      description: Create/update APIs from API Spec
      parameters:
        - $ref: "#/components/parameters/orgIdParam"
        - $ref: "#/components/parameters/envIdParam"
        - $ref: "#/components/parameters/dryRunQueryParam"
      requestBody:
        description: API Specification
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/ApiV4Spec"
        required: true
      responses:
        "200":
          description: State of the successfully created/updated API
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiV4State"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/Error"
  /organizations/{orgId}/environments/{envId}/apis/{hrid}:
    parameters:
      - $ref: "#/components/parameters/orgIdParam"
      - $ref: "#/components/parameters/envIdParam"
      - $ref: "#/components/parameters/hridParam"
    get:
      operationId: getApi
      tags:
        - APIs
      summary: Get one API
      description: Get an API using HRID
      parameters:
        - $ref: "#/components/parameters/orgIdParam"
        - $ref: "#/components/parameters/envIdParam"
        - $ref: "#/components/parameters/hridParam"
      responses:
        "200":
          description: API successfully retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiV4State"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/Error"
    delete:
      operationId: deleteApi
      tags:
        - APIs
      summary: Delete one API
      description: Delete an API using it's HRID
      parameters:
        - $ref: "#/components/parameters/orgIdParam"
        - $ref: "#/components/parameters/envIdParam"
        - $ref: "#/components/parameters/hridParam"
      responses:
        "204":
          description: API successfully deleted
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/Error"

  # Applications
  /organizations/{orgId}/environments/{envId}/applications:
    put:
      operationId: createOrUpdateApplications
      tags:
        - Applications
      summary: Create or update Applications from ApplicationSpec
      description: Create/update Applications from Application Spec
      parameters:
        - $ref: "#/components/parameters/orgIdParam"
        - $ref: "#/components/parameters/envIdParam"
        - $ref: "#/components/parameters/dryRunQueryParam"
      requestBody:
        description: Application specification
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/ApplicationSpec"
        required: true
      responses:
        "200":
          description: State of the successfully created/updated Applications
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationState"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/Error"
  /organizations/{orgId}/environments/{envId}/applications/{hrid}:
    parameters:
      - $ref: "#/components/parameters/orgIdParam"
      - $ref: "#/components/parameters/envIdParam"
      - $ref: "#/components/parameters/hridParam"
    get:
      operationId: getApplication
      tags:
        - Applications
      summary: Get one Application
      description: Get an Application using HRID
      parameters:
        - $ref: "#/components/parameters/orgIdParam"
        - $ref: "#/components/parameters/envIdParam"
        - $ref: "#/components/parameters/hridParam"
      responses:
        "200":
          description: Application successfully retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationState"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/Error"
    delete:
      operationId: deleteApplication
      tags:
        - Applications
      summary: Delete one Application
      description: Delete an Application using HRID
      parameters:
        - $ref: "#/components/parameters/orgIdParam"
        - $ref: "#/components/parameters/envIdParam"
        - $ref: "#/components/parameters/hridParam"
      responses:
        "204":
          description: Application successfully deleted
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/Error"

  # Subscription
  /organizations/{orgId}/environments/{envId}/subscriptions:
    put:
      operationId: createOrUpdateSubscriptions
      tags:
        - Subscriptions
      summary: Create or update Subscriptions from SubscriptionSpec
      description: Create/update Subscription from Subscription Spec
      parameters:
        - $ref: "#/components/parameters/orgIdParam"
        - $ref: "#/components/parameters/envIdParam"
      requestBody:
        description: Subscription specification
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/SubscriptionSpec"
        required: true
      responses:
        "200":
          description: State of the successfully created Subscription
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubscriptionState"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/Error"

  /organizations/{orgId}/environments/{envId}/subscriptions/{hrid}:
    parameters:
      - $ref: "#/components/parameters/orgIdParam"
      - $ref: "#/components/parameters/envIdParam"
      - $ref: "#/components/parameters/hridParam"
    get:
      operationId: getSubscription
      tags:
        - Subscriptions
      summary: Get one Subscription
      description: Get a Subscription using HRID
      parameters:
        - $ref: "#/components/parameters/orgIdParam"
        - $ref: "#/components/parameters/envIdParam"
        - $ref: "#/components/parameters/hridParam"
      responses:
        "200":
          description: Subscription successfully retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubscriptionState"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/Error"
    delete:
      operationId: deleteSubscription
      tags:
        - Subscriptions
      summary: Delete one Subscription
      description: Delete a Subscription using HRID
      parameters:
        - $ref: "#/components/parameters/orgIdParam"
        - $ref: "#/components/parameters/envIdParam"
        - $ref: "#/components/parameters/hridParam"
      responses:
        "204":
          description: Subscription successfully deleted
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/Error"

  # Shared Policy Groups
  /organizations/{orgId}/environments/{envId}/shared-policy-groups/{hrid}:
    parameters:
      - $ref: "#/components/parameters/orgIdParam"
      - $ref: "#/components/parameters/envIdParam"
      - $ref: "#/components/parameters/hridParam"
    get:
      operationId: getPolicyGroup
      tags:
        - Shared Policy Group
      summary: Get one policy group
      description: Get a policy group using HRID
      responses:
        "200":
          description: Shared policy group successfully retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SharedPolicyGroupState"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/Error"
    delete:
      operationId: deletePolicyGroup
      tags:
        - Shared Policy Group
      summary: Delete one policy group
      description: Delete a shared policy group using HRID
      parameters:
        - $ref: "#/components/parameters/dryRunQueryParam"
      responses:
        "204":
          description: Shared Policy Group successfully deleted
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/Error"
  /organizations/{orgId}/environments/{envId}/shared-policy-groups:
    put:
      operationId: createOrUpdatePolicyGroup
      tags:
        - Shared Policy Group
      summary: Create or update Shared Policy Group from SharedPolicyGroupSpec
      description: Create/update Shared Policy Group from Shared Policy Group Spec
      parameters:
        - $ref: "#/components/parameters/orgIdParam"
        - $ref: "#/components/parameters/envIdParam"
        - $ref: "#/components/parameters/dryRunQueryParam"
      requestBody:
        description: Shared Policy Group Specification
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/SharedPolicyGroupSpec"
        required: true
      responses:
        "200":
          description: State of the successfully created / updated Shared Policy Group
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SharedPolicyGroupState"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/Error"

components:
  schemas:
    Hrid:
      type: string
      pattern: '^[a-zA-Z][a-zA-Z0-9_-]{2,}$'
      description: A unique human readable id identifying this resource
      examples:
        - my_demo_api
        - simple_demo_app
        - keyless_demo_plan
        - demo_subscription
        - demo_shared_policy_groups
    ApiV4Spec:
      description: ApiV4DefinitionSpec defines the desired state of ApiDefinition.
      type: object
      properties:
        hrid:
          $ref: "#/components/schemas/Hrid"
        name:
          type: string
          description: API's name. Duplicate names can exists.
          examples:
            - My Api
          minLength: 1
        version:
          type: string
          description: API's version. It's a simple string only used in the portal.
          examples:
            - 1.0.0
          minLength: 1
        type:
          $ref: "#/components/schemas/ApiType"
        description:
          type: string
          description: API's description. A short description of your API.
          examples:
            - I can use many characters to describe this API.
        tags:
          type: array
          description: The list of sharding tags associated with this API.
          examples:
            - ["public"]
          items:
            type: string
          uniqueItems: true
        listeners:
          type: array
          description: The list of listeners associated with this API.
          items:
            $ref: "#/components/schemas/Listener"
          minItems: 1
        endpointGroups:
          type: array
          items:
            $ref: "#/components/schemas/EndpointGroupV4"
          minItems: 1
        analytics:
          $ref: "#/components/schemas/Analytics"
        failover:
          $ref: "#/components/schemas/FailoverV4"
        properties:
          type: array
          items:
            $ref: "#/components/schemas/Property"
        resources:
          type: array
          items:
            $ref: "#/components/schemas/Resource"
        plans:
          default: []
          description: List of Plans for the API
          items:
            $ref: '#/components/schemas/PlanV4'
          type: array
        flowExecution:
          $ref: "#/components/schemas/FlowExecution"
        flows:
          default: []
          description: List of flows for the API
          items:
            $ref: "#/components/schemas/FlowV4"
          type: array
        responseTemplates:
          type: object
          description:
            A list of Response Templates for the API (Not applicable for Native
            API)
          additionalProperties:
            type: object
            additionalProperties:
              $ref: "#/components/schemas/ResponseTemplate"
        services:
          $ref: "#/components/schemas/ApiServices"
        groups:
          default: []
          description: >-
            List of groups associated with the API.

            This groups are id or name references to existing groups in
            APIM.
          items:
            type: string
          type: array
        visibility:
          $ref: "#/components/schemas/Visibility"
        state:
          $ref: "#/components/schemas/LifecycleState"
        primaryOwner:
          $ref: "#/components/schemas/PrimaryOwner"
        labels:
          default: []
          description: List of labels of the API
          items:
            type: string
          type: array
        metadata:
          type: array
          description: The list of API's metadata.
          items:
            $ref: "#/components/schemas/Metadata"
          uniqueItems: true
        lifecycleState:
          $ref: "#/components/schemas/ApiLifecycleState"
        categories:
          type: array
          description: The list of category keys associated with this API.
          examples:
            - [health, media]
          items:
            type: string
        members:
          type: array
          description: Set of members associated with the plan
          items:
            $ref: '#/components/schemas/Member'
          uniqueItems: true
        notifyMembers:
          default: true
          description: |-
            If true, new members added to the API spec will
            be notified when the API is synced with APIM.
          type: boolean
          writeOnly: true
        pages:
          default: []
          description: List of Pages for the API
          items:
            $ref: '#/components/schemas/PageV4'
          type: array
        consoleNotificationConfiguration:
          $ref: '#/components/schemas/PortalNotificationConfig'
      required:
        - hrid
        - name
        - type
        - listeners
        - endpointGroups
        - version
        - lifecycleState
    ApiV4State:
      description: API state
      allOf:
        - $ref: "#/components/schemas/ApiV4Spec"
        - type: object
          properties:
            errors:
              $ref: "#/components/schemas/Errors"
        - type: object
          properties:
            id:
              type: string
              description: API's uuid.
            crossId:
              type: string
              description: >-
                When promoting an API from one environment to the other,
                this ID identifies the API across those different
                environments.
            environmentId:
              description:
                The environment ID of the API.
              type: string
            organizationId:
              description:
                The organization ID of the API.
              type: string
    ApplicationSpec:
      description: |
        Defines the desired state of Application. 
        It represents an API consumer. 
        Applications act on behalf of users to request tokens, provide user identity information, and access protected resources from APIs. 
        They can be of different types, such as Simple, Web, SPA, Native, or Backend-to-backend, each with specific configuration requirements. 
        Applications are also used to manage API keys, analytics, and subscriptions.
      type: object
      properties:
        hrid:
          $ref: "#/components/schemas/Hrid"
        name:
          type: string
          description: Application's name. Duplicate names can exists.
          examples:
            - Example Application
          minLength: 1
        description:
          type: string
          description: Application's description.
          examples:
            - This is the documentation explaining purpose of this Application  .
          minLength: 1
        domain:
          type: string
          description: Application's domain.
          examples:
           - examples.com
        groups:
          default: []
          description: >-
            List of groups associated with the Application.

            This groups are id or name references to existing groups in
            APIM.
          items:
            type: string
          type: array
          example: ["developers"]
        pictureUrl:
          type: string
          description: Application's picture Url.
          examples:
            - "https://upload.wikimedia.org/wikipedia/fr/0/09/Logo_App_Store_d%27Apple.png"
        notifyMembers:
          default: false
          description: |-
            If true, new members added to the Application spec will
            be notified when the Application is synced with APIM.
          type: boolean
        background:
          type: string
          description: Application's background url
          examples:
            - "https://upload.wikimedia.org/wikipedia/commons/d/df/Green_Red_Gradient_Background.png"
        primaryOwner:
          $ref: "#/components/schemas/PrimaryOwner"
          readOnly: true
        settings:
          $ref: "#/components/schemas/ApplicationSettings"
        metadata:
          type: array
          description: The list of Application's metadata.
          items:
            $ref: "#/components/schemas/Metadata"
        members:
          type: array
          description: Set of members associated with the application
          items:
            $ref: '#/components/schemas/Member'
          uniqueItems: true
        status:
          type: string
          description: Application are either ACTIVE or ARCHIVED never actually deleted.
          enum:
            - ACTIVE
            - ARCHIVED
          default: ACTIVE
          examples:
            - ACTIVE
      required:
        - hrid
        - name
        - description
    ApplicationSettings:
      description: Application settings defines the configuration of consumers authentication.
        Depending on the control plane configuration some applications types may be restricted.
        `app` and `oauth` are mutually exclusive. If none is set it fallbacks to `app` without any property set.
      properties:
        app:
          $ref: '#/components/schemas/SimpleApplicationSettings'
        oauth:
          $ref: '#/components/schemas/ApplicationOAuthClientSettings'
        tls:
          $ref: '#/components/schemas/ApplicationTLSSettings'

    SimpleApplicationSettings:
      description: Simple application settings
      properties:
        type:
          type: string
          description: Simple application type, for information
          examples:
           - web
        clientId:
          type: string
          description: Simple application client ID
          examples:
            - example-client-id
    ApplicationOAuthClientSettings:
      description: Application OAuth client settings
      properties:
        applicationType:
          type: string
          description: |
            OAuth client application type: 
            `browser` for single page apps (SPA),
            `web` for regular web apps,
            `native` for smartphone apps,
            `backend_to_backend` for backend to backend.
          enum:
            - browser
            - web
            - native
            - backend_to_backend
          examples:
            - browser
        grantTypes:
          type: array
          description: |
            OAuth client grant types. `authorization_code` is mandatory except when application type is `backend_to_backend`.
            `refresh_token` can be used only application type is `web` and `browser`.
            `password` (Resource Owner Password) only with applicationType `native`.
            `client_credentials` only works  when application type is `backend_to_backend`
          items:
            type: string
            enum:
              - authorization_code
              - implicit
              - refresh_token
              - password
              - client_credentials
          minItems: 1
          uniqueItems: true
          examples:
            - authorization_code
        redirectUris:
          description: OAuth client redirect Uris
          items:
            type: string
          type: array
          example: ["https://myapp.example.com/oauth/callback"]
        additionalClientMetadata:
          type: object
          additionalProperties:
            type: string
      required:
       - applicationType
       - redirectUris
       - grantTypes
    ApplicationTLSSettings:
      description: Application TLS settings
      properties:
        clientCertificate:
          type: string
          description: Application TLS client certificate
          examples:
           - |
            -----BEGIN CERTIFICATE-----
            MIIDfjCCAmagAwIBAgIUfHj3mygGaOfd1u1Uj09L6vY5stcwDQYJKoZIhvcNAQEL
            BQAwRTELMAkGA1UEBhMCQVUxEzARBgNVBAgMClNvbWUtU3RhdGUxITAfBgNVBAoM
            GEludGVybmV0IFdpZGdpdHMgUHR5IEx0ZDAeFw0yNTA4MDUxNTUyMTBaFw0yNjA4
            MDUxNTUyMTBaMGkxCzAJBgNVBAYTAlVTMQ4wDAYDVQQIDAVTdGF0ZTENMAsGA1UE
            BwwEQ2l0eTEVMBMGA1UECgwMT3JnYW5pemF0aW9uMRMwEQYDVQQLDApEZXBhcnRt
            ZW50MQ8wDQYDVQQDDAZjbGllbnQwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK
            AoIBAQDW862KHvjkq0EtwZJO/xw+QoTnRB0qm4E5+1wspC1er6tOm3hTJqCzfKwQ
            gZQKoP1Eq1PhM8GzceeqGjh8VZJaDmWwiJZdk5fprrZ1Lvwwl010lnh4MEhtN0Dw
            lwHSZCQ/vSvEDWJXugiE4F1OvAgi2+lIR5uYfyy2U6YbhlcVPdGAboBAFSQnxECF
            1gDpc3dFarPXfO/X3yf/BzAHys6IyMyqvBbur3K2UTO4gJL+59/DEyAwx7ofwukj
            TWpgGNDXlNFYwKk9qTSTbxdcofAVCjrBCEDTdoPkvrr5SxI7dV/ha5y33iOI4VPV
            o6vN/58RJz+ZMI0mbOBeluqBW+xBAgMBAAGjQjBAMB0GA1UdDgQWBBTjpQ+KfcmK
            w4hCptY8iK/LX9BOhzAfBgNVHSMEGDAWgBQYdcUWurMS8FEEMzcJlFm2d4Dk3DAN
            BgkqhkiG9w0BAQsFAAOCAQEAoyv0RhgEbRNmyFF6WoTeH4durjmZRe3SCtum0Mnv
            4TOGT4sstPdz0l24psroL33z3jtsY8IrbqnSfTXWbziSCanDXnMHOewLykgN0ld0
            PHa2i5naU5tMeGdWeM80ZTXU7GMiiCkgrRai/V7GkXNKYTIdBontiLpbxUaGLpjY
            aMYoCmHIEizazQP9xaAtm40CkYub1o40kgyQULyrwftqrlRtKshfYmHB6yxYVz60
            pikgTVupVbhYcNMLOVXO7Q31UEYfC7fxMGqzybXg67EhvzoykXhhYo3YqAjho2yh
            um2oEO8b5eQVAwRaooVLh0uqjZCpfN2ozscPpiTM9Pj3xQ==
            -----END CERTIFICATE-----
      required:
        - clientCertificate

    ApplicationState:
      description: Application state that has been created/updated
      allOf:
        - $ref: "#/components/schemas/ApplicationSpec"
        - type: object
          properties:
            errors:
              $ref: "#/components/schemas/Errors"
        - type: object
          properties:
            id:
              type: string
              description: Application's uuid.
              examples:
               - 550e8400-e29b-41d4-a716-446655440000
            environmentId:
              description: The environment ID of the Application.
              type: string
              default: DEFAULT
              examples:
                - DEFAULT
            organizationId:
              description: The organization ID of the Application.
              type: string
              default: DEFAULT
              examples:
               - DEFAULT

    # Subscription
    SubscriptionSpec:
      description: SubscriptionSpec defines the desired state of Subscription.
      type: object
      properties:
        hrid:
          $ref: "#/components/schemas/Hrid"
        applicationHrid:
          type: string
          description: Application's Hrid that needs to subscribe to the API.
          example: demo-app
          minLength: 1
        apiHrid:
          type: string
          description: The API's Hrid that you want to subscribe to.
          example: demo-api
          minLength: 1
        planHrid:
          type: string
          description: API plan's Hrid
          example: demo-plan
        endingAt:
          type: string
          format: date-time
          example: "2040-12-25T09:12:28Z"
      required:
        - hrid
        - applicationHrid
        - apiHrid
        - planHrid

    SubscriptionState:
      description: State of subscription that has been created/update
      allOf:
        - $ref: "#/components/schemas/SubscriptionSpec"
        - type: object
          properties:
            errors:
              $ref: "#/components/schemas/Errors"
        - type: object
          properties:
            id:
              type: string
              description: Subscription's uuid.
            environmentId:
              description:
                The environment ID of the Subscription.
              type: string
            organizationId:
              description:
                The organization ID of the Subscription.
              type: string
            startingAt:
              type: string
              format: date-time
              example: "2040-12-25T09:12:28+01:00"

    SharedPolicyGroupState:
      description: State of Shared Policy Groups that has been created/updated
      allOf:
        - $ref: "#/components/schemas/SharedPolicyGroupSpec"
        - type: object
          properties:
            errors:
              $ref: "#/components/schemas/Errors"
        - type: object
          properties:
            id:
              description:
                The id of the shared policy group.
              type: string
            crossId:
              description:
                The Cross ID is used to identify a shared policy group that has been promoted from
                one environment to another.
              type: string
            environmentId:
              description:
                The environment ID of the shared policy group.
              type: string
            organizationId:
              description:
                The organization ID of the shared policy group.
              type: string
    SharedPolicyGroupSpec:
      description: Shared Policy Group Spec
      type: object
      properties:
        hrid:
          $ref: "#/components/schemas/Hrid"
        apiType:
          $ref: "#/components/schemas/ApiType"
        description:
          type: string
          description: The description of the shared policy group
          examples:
            - this is a shared policy group
          maxLength: 1024
        prerequisiteMessage:
          type: string
          description: The prerequisite message of the shared policy group. This message is displayed to the user to help understand the prerequisite to use the shared policy group.
          examples:
            - the resource cache "my-cache" is required
          maxLength: 1024
        name:
          type: string
          description: The name of the shared policy group
          examples:
            - My Shared Policy Group
          maxLength: 512
        phase:
          $ref: "#/components/schemas/FlowPhase"
        steps:
          description: SharedPolicyGroup Steps
          items:
            $ref: "#/components/schemas/StepV4"
          type: array
      required:
        - hrid
        - apiType
        - name
        - phase
    FlowPhase:
      type: string
      description: The execution phase of a policy.
      enum:
        - REQUEST
        - RESPONSE
        - INTERACT
        - CONNECT
        - PUBLISH
        - SUBSCRIBE
    PlanV4:
      description: API Plan
      type: object
      properties:
        hrid:
          $ref: "#/components/schemas/Hrid"
        name:
          type: string
        description:
          type: string
        security:
          $ref: '#/components/schemas/PlanSecurity'
        characteristics:
          type: array
          items:
            type: string
        excludedGroups:
          type: array
          items:
            type: string
        generalConditions:
          type: string
        order:
          type: integer
        selectionRule:
          type: string
        status:
          $ref: '#/components/schemas/PlanStatus'
        tags:
          type: array
          items:
            type: string
        type:
          $ref: '#/components/schemas/PlanType'
        validation:
          $ref: '#/components/schemas/PlanValidation'
        flows:
          type: array
          items:
            $ref: '#/components/schemas/FlowV4'
        mode:
          $ref: '#/components/schemas/PlanMode'
      required:
        - hrid
        - name
        - status
        - type
        - mode
        - validation
        - security

    Member:
      description: Users that can manage an object (API, Application, etc.)
      type: object
      properties:
        id:
          type: string
          description: "User UUID of the memeber"
          readOnly: true
        source:
          type: string
          description: Where the memeber was created (system, idp, etc.)
          examples:
           - system
        sourceId:
          description: Id of the user in the source
          type: string
          examples:
            - "john.doe@example.com"
        role:
          description: The role of the user in regards of the managed oject (API, Application, etc.)
          examples:
           - REVIEWER
          type: string
      required:
        - source
        - sourceId
        - role
    PortalNotificationConfig:
      description: Portal notification config
      type: object
      properties:
        config_type:
          type: string
          enum:
            - PORTAL
            - GENERIC
        name:
          type: string
        referenceType:
          type: string
        referenceId:
          type: string
        user:
          type: string
        hooks:
          type: array
          items:
            type: string
        groups:
          type: array
          items:
            type: string
      required:
        - config_type
        - name

    Analytics:
      description: API analytics
      type: object
      properties:
        enabled:
          type: boolean
          description: Whether or not analytics is enabled.
          default: true
        sampling:
          $ref: "#/components/schemas/Sampling"
        logging:
          $ref: "#/components/schemas/LoggingV4"
        tracing:
          $ref: "#/components/schemas/TracingV4"

    ApiLifecycleState:
      type: string
      description: The status of the API regarding the console.
      examples:
        - CREATED
      enum:
        - ARCHIVED
        - CREATED
        - DEPRECATED
        - PUBLISHED
        - UNPUBLISHED
      default: CREATED
    ApiServices:
      description: Api services
      type: object
      properties:
        dynamicProperty:
          $ref: "#/components/schemas/ServiceV4"
    ApiType:
      type: string
      description: API's type.
      examples:
        - MESSAGE
      enum:
        - MESSAGE
        - PROXY
        - NATIVE
    Visibility:
      type: string
      description: The visibility of the resource regarding the portal.
      default: PUBLIC
      examples:
        - PUBLIC
      enum:
        - PUBLIC
        - PRIVATE
    ChannelSelector:
      description: Channel selector
      type: object
      title: "ChannelSelector"
      required:
        - type
        - channel
        - channelOperator
      allOf:
        - $ref: "#/components/schemas/BaseSelector"
        - type: object
          properties:
            operations:
              type: array
              description: The list of operations associated with this channel selector.
              items:
                type: string
                description: The operation associated with this channel selector.
                enum:
                  - PUBLISH
                  - SUBSCRIBE
              uniqueItems: true
            channel:
              type: string
              description: The channel of the selector
              examples:
                - /my/channel
              default: /
            channelOperator:
              $ref: "#/components/schemas/Operator"
            entrypoints:
              type: array
              items:
                type: string
              uniqueItems: true
    ConditionSelector:
      description: Condition selector
      type: object
      title: "ConditionSelector"
      required:
        - type
        - condition
      allOf:
        - $ref: "#/components/schemas/BaseSelector"
        - type: object
          properties:
            condition:
              type: string
              description: The condition of the selector
              examples:
                - ${#jsonPath(payload, '$.myField') == 'myValue'}
    Cors:
      description: Http listener Cross-Origin Resource Sharing
      type: object
      properties:
        allowCredentials:
          type: boolean
        allowHeaders:
          uniqueItems: true
          type: array
          items:
            type: string
        allowMethods:
          uniqueItems: true
          type: array
          items:
            type: string
        allowOrigin:
          uniqueItems: true
          type: array
          items:
            type: string
        enabled:
          type: boolean
        exposeHeaders:
          uniqueItems: true
          type: array
          items:
            type: string
        maxAge:
          type: integer
          format: int32
          default: -1
        runPolicies:
          type: boolean
    Dlq:
      description: DLQ
      type: object
      properties:
        endpoint:
          type: string
          description: The endpoint of the DLQ.
    EndpointV4:
      description: API endpoint
      type: object
      properties:
        name:
          type: string
          description: The name of the endpoint
          examples:
            - default-endpoint
        type:
          type: string
          description: The type of the endpoint
          examples:
            - mock
        weight:
          type: integer
          format: int32
          description: The weight of the endpoint
          default: 1
        inheritConfiguration:
          type: boolean
          description: Is the configuration of the endpoint inherited from the endpoint group it belongs to.
          default: false
        configuration:
          type: object
        sharedConfigurationOverride:
          type: object
        services:
          $ref: "#/components/schemas/EndpointServices"
        secondary:
          type: boolean
          description: Is the endpoint a secondary endpoint.
          default: false
        tenants:
          type: array
          description: The list of tenants associated to the endpoint.
          items:
            type: string
      required:
        - type
    EndpointGroupV4:
      description: API Endpoint Group
      type: object
      properties:
        name:
          type: string
          description: The name of the endpoint group
          examples:
            - default-endpoint-group
        type:
          type: string
          description: The type of the endpoint group
          examples:
            - default
        loadBalancer:
          $ref: "#/components/schemas/LoadBalancer"
        sharedConfiguration:
          type: object
        endpoints:
          type: array
          items:
            $ref: "#/components/schemas/EndpointV4"
        services:
          $ref: "#/components/schemas/EndpointGroupServices"
      required:
        - type
    EndpointGroupServices:
      description: API Endpoint Group Services
      type: object
      properties:
        discovery:
          $ref: "#/components/schemas/ServiceV4"
        healthCheck:
          $ref: "#/components/schemas/ServiceV4"
    EndpointServices:
      description: API Endpoint Services
      type: object
      properties:
        healthCheck:
          $ref: "#/components/schemas/ServiceV4"
    Entrypoint:
      description: API Endpoint
      type: object
      required:
        - type
      properties:
        type:
          type: string
          description: The type of the entrypoint
          examples:
            - http-get
        qos:
          $ref: "#/components/schemas/Qos"
        dlq:
          $ref: "#/components/schemas/Dlq"
        configuration:
          type: object

    FlowV4:
      description: API or PLan Flow
      type: object
      properties:
        id:
          type: string
          description: Flow's uuid.
          examples:
            - 4e6abbd2-c0c6-462d-be9e-6371209af34b
        name:
          type: string
          description: Flow's name.
          examples:
            - My Flow
        enabled:
          type: boolean
          description: Is the flow enabled.
          default: true
        selectors:
          type: array
          items:
            $ref: "#/components/schemas/Selector"
        request:
          type: array
          description: Request flow steps used for PROXY and MESSAGE APIs
          items:
            $ref: "#/components/schemas/StepV4"
        response:
          type: array
          description: Response flow steps used for PROXY and MESSAGE APIs
          items:
            $ref: "#/components/schemas/StepV4"
        subscribe:
          type: array
          description: Subscribe flow steps used for MESSAGE and NATIVE APIs
          items:
            $ref: "#/components/schemas/StepV4"
        publish:
          type: array
          description: Publish flow steps used for MESSAGE and NATIVE APIs
          items:
            $ref: "#/components/schemas/StepV4"
        connect:
          type: array
          description: Connect flow steps used for NATIVE APIs
          items:
            $ref: "#/components/schemas/StepV4"
        interact:
          type: array
          description: Interact flow steps used for NATIVE APIs
          items:
            $ref: "#/components/schemas/StepV4"
        tags:
          type: array
          items:
            type: string
          description: Flow's tags.
          examples:
            - [tag1, tag2]
          uniqueItems: true
    FlowExecution:
      description: Flow execution
      type: object
      properties:
        mode:
          $ref: "#/components/schemas/FlowMode"
        matchRequired:
          type: boolean
          description: Is the flow execution match required.
          default: false
    FlowMode:
      type: string
      description: API's flow mode.
      examples:
        - BEST_MATCH
      default: DEFAULT
      enum:
        - BEST_MATCH
        - DEFAULT
    HttpListener:
      description: HTTP Listener
      type: object
      title: "HttpListener"
      required:
        - type
      allOf:
        - $ref: "#/components/schemas/BaseListener"
        - type: object
          properties:
            paths:
              type: array
              minItems: 1
              items:
                $ref: "#/components/schemas/PathV4"
            pathMappings:
              type: array
              items:
                type: string
            cors:
              $ref: "#/components/schemas/Cors"
    HttpMethod:
      type: string
      description: The method of the selector
      examples:
        - GET
      enum:
        - CONNECT
        - DELETE
        - GET
        - HEAD
        - OPTIONS
        - PATCH
        - POST
        - PUT
        - TRACE
        - OTHER
    HttpSelector:
      description: HTTP selector
      type: object
      title: "HttpSelector"
      required:
        - type
        - path
        - pathOperator
      allOf:
        - $ref: "#/components/schemas/BaseSelector"
        - type: object
          properties:
            path:
              type: string
              description: The path of the selector
              examples:
                - /my/path
              default: /
            pathOperator:
              $ref: "#/components/schemas/Operator"
            methods:
              type: array
              items:
                $ref: "#/components/schemas/HttpMethod"
              uniqueItems: true

    Listener:
      description: Listener
      oneOf:
        - $ref: "#/components/schemas/HttpListener"
        - $ref: "#/components/schemas/SubscriptionListener"
        - $ref: "#/components/schemas/TcpListener"
        - $ref: "#/components/schemas/KafkaListener"
      discriminator:
        propertyName: type
        mapping:
          HTTP: "#/components/schemas/HttpListener"
          TCP: "#/components/schemas/TcpListener"
          SUBSCRIPTION: "#/components/schemas/SubscriptionListener"
          KAFKA: "#/components/schemas/KafkaListener"
    BaseListener:
      description: Base listener
      type: object
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/ListenerType"
        entrypoints:
          type: array
          minItems: 1
          items:
            $ref: "#/components/schemas/Entrypoint"
        servers:
          type: array
          items:
            type: string
      discriminator:
        propertyName: type
        mapping:
          HTTP: "#/components/schemas/HttpListener"
          TCP: "#/components/schemas/TcpListener"
          SUBSCRIPTION: "#/components/schemas/SubscriptionListener"
          KAFKA: "#/components/schemas/KafkaListener"
    ListenerType:
      type: string
      description: Listener type.
      examples:
        - HTTP
      enum:
        - HTTP
        - SUBSCRIPTION
        - TCP
        - KAFKA
    LoadBalancer:
      description: Load Balancer
      type: object
      properties:
        type:
          type: string
          description: Load balancer type.
          examples:
            - ROUND_ROBIN
          default: ROUND_ROBIN
          enum:
            - RANDOM
            - ROUND_ROBIN
            - WEIGHTED_RANDOM
            - WEIGHTED_ROUND_ROBIN
    LoggingV4:
      description: API logging configuration
      type: object
      properties:
        condition:
          type: string
        messageCondition:
          type: string
        content:
          $ref: "#/components/schemas/LoggingContentV4"
        phase:
          $ref: "#/components/schemas/LoggingPhase"
        mode:
          $ref: "#/components/schemas/LoggingModeV4"
    LoggingContentV4:
      description: API logging content
      type: object
      properties:
        headers:
          type: boolean
        messageHeaders:
          type: boolean
        payload:
          type: boolean
        messagePayload:
          type: boolean
        messageMetadata:
          type: boolean
    LoggingModeV4:
      description: API logging mode
      type: object
      properties:
        endpoint:
          type: boolean
        entrypoint:
          type: boolean
    LoggingPhase:
      description: Logging phase
      type: object
      properties:
        request:
          type: boolean
        response:
          type: boolean
    TracingV4:
      description: API analytic tracing
      type: object
      properties:
        enabled:
          type: boolean
          description: Enable OpenTelemetry tracing
        verbose:
          type: boolean
          description: Enable technical tracing to get more details on request execution. Be careful this settings would generate more noise and would impact performance.
    Operator:
      type: string
      description: The path operator of the selector
      examples:
        - EQUALS
      default: STARTS_WITH
      enum:
        - EQUALS
        - STARTS_WITH

    PageV4:
      description: Documentation page. Can be of multiple formats.
      type: object
      allOf:
        - $ref: "#/components/schemas/BasePageV4"
      properties:
        translations:
          type: array
          description: List of page translations.
          items:
            $ref: "#/components/schemas/PageV4Translation"

    PageV4Translation:
      description: Documentation page translation. Can be of multiple formats.
      type: object
      allOf:
        - $ref: "#/components/schemas/BasePageV4"

    BasePageV4:
      description: Documentation page.
      type: object
      properties:
        hrid:
          $ref: "#/components/schemas/Hrid"
        crossId:
          type: string
          description: Page's cross uuid.
          examples:
            - 00f8c9e7-78fc-4907-b8c9-e778fc790750
          readOnly: true
        name:
          type: string
          description: Page's name.
          examples:
            - My Page
        type:
          $ref: "#/components/schemas/PageType"
        content:
          type: string
          description: Page's content.
          examples:
            - My Page content
        order:
          type: integer
          description: Page's order.
          examples:
            - 1
        lastContributor:
          type: string
          description: Page's last contributor. Id of a user.
          examples:
            - 00f8c9e7-78fc-4907-b8c9-e778fc790750
        published:
          type: boolean
          description: Page's published status.
          examples:
            - true
        visibility:
          $ref: "#/components/schemas/Visibility"
        updatedAt:
          type: string
          format: date-time
          description: Page's last update date.
          example: 2018-01-01T00:00:00.000Z
        contentType:
          type: string
          description: Page's content type.
          examples:
            - application/json
        source:
          $ref: "#/components/schemas/PageSource"
        configuration:
          type: object
          description: Page's configuration.
          additionalProperties:
            type: string
        homepage:
          type: boolean
          description: Page's homepage status.
          examples:
            - true
        parentId:
          type: string
          description: Page's parent id.
          examples:
            - 00f8c9e7-78fc-4907-b8c9-e778fc790750
        parentPath:
          type: string
          description: Page's parent path.
          examples:
            - /parent
        excludedAccessControls:
          type: boolean
          description: Flag to restrict access to user matching the restrictions.
        accessControls:
          type: array
          description: List of access controls.
          items:
            $ref: "#/components/schemas/AccessControl"
        attachedMedia:
          type: array
          description: List of attached media.
          items:
            $ref: "#/components/schemas/PageMedia"
        metadata:
          type: object
          description: Page's metadata.
          additionalProperties:
            type: string
        contentRevision:
          $ref: "#/components/schemas/Revision"
        hidden:
          type: boolean
          description: If folder is published but not shown in Portal.
        generalConditions:
          type: boolean
          description: If page is used as General Conditions of an active plan.
      required:
        - hrid
        - type

    PageType:
      type: string
      description: The type of the page.
      examples:
        - MARKDOWN
      enum:
        - ASCIIDOC
        - ASYNCAPI
        - MARKDOWN
        - MARKDOWN_TEMPLATE
        - SWAGGER
        - FOLDER
        - LINK
        - ROOT
        - SYSTEM_FOLDER
        - TRANSLATION

    # Documentation pages
    AccessControl:
      description: Document access control
      type: object
      properties:
        referenceId:
          type: string
          description: The id of the resource used to check the access control
          examples:
            - 00f8c9e7-78fc-4907-b8c9-e778fc790750
        referenceType:
          type: string
          description: The type of the resource used to check the access control
          examples:
            - GROUP
            - ROLE
    PageSource:
      description: Page source
      type: object
      properties:
        type:
          type: string
          description: The type of the page source (=fetcher type).
          examples:
            - http-fetcher
            - git-fetcher
            - gitlab-fetcher
            - github-fetcher
            - bitbucket-fetcher
        configuration:
          type: object
          description: Page source's configuration.
    PageMedia:
      description: Page media
      type: object
      properties:
        name:
          type: string
          description: Media's name.
          examples:
            - My Media
        hash:
          type: string
          description: Media's hash.
          examples:
            - 00f8c9e7-78fc-4907-b8c9-e778fc790750
        attachedAt:
          type: string
          format: date-time
          description: Media's attachment date.
          example: 2018-01-01T00:00:00.000Z
    Revision:
      description: Page revision
      type: object
      properties:
        id:
          type: string
          description: Id of the page used to fill the content attributes.
          examples:
            - 00f8c9e7-78fc-4907-b8c9-e778fc790750
        revision:
          type: integer
          description: Revision number.
          examples:
            - 1

    PathV4:
      description: API Path
      type: object
      properties:
        host:
          type: string
        path:
          type: string
          default: "/"
        overrideAccess:
          type: boolean
          default: false

    PlanSecurity:
      description: API plan security
      type: object
      properties:
        type:
          $ref: "#/components/schemas/PlanSecurityType"
        configuration:
          type: object
      required:
        - type
    PlanSecurityType:
      type: string
      description: Plan security type.
      examples:
        - KEY_LESS
      enum:
        - KEY_LESS
        - API_KEY
        - OAUTH2
        - JWT
        - MTLS
    PlanStatus:
      type: string
      description: Plan status.
      examples:
        - STAGING
      enum:
        - STAGING
        - PUBLISHED
        - DEPRECATED
        - CLOSED
    PlanType:
      type: string
      description: Plan type.
      examples:
        - API
      enum:
        - API
        - CATALOG
    PlanValidation:
      type: string
      description: Plan validation type.
      examples:
        - AUTO
      enum:
        - AUTO
        - MANUAL
    PlanMode:
      type: string
      description: The behavioural mode of the Plan (Standard for classical plan, Push for subscription plan).
      examples:
        - STANDARD
      enum:
        - STANDARD
        - PUSH

    PrimaryOwner:
      description: Primary owner, the creator of the application. Can perform all possible API actions.
      type: object
      properties:
        id:
          type: string
          description: Owner's uuid.
          examples:
            - 00f8c9e7-78fc-4907-b8c9-e778fc790750
        email:
          type: string
          description: Owner's email. Can be null if owner is a group.
          examples:
            - "john.doe@example.com"
        displayName:
          type: string
          description: Owner's name.
          examples:
            - John Doe
          minLength: 1
        type:
          $ref: "#/components/schemas/MembershipMemberType"
    Property:
      description: Api property
      type: object
      required:
        - key
        - value
      properties:
        key:
          description: property key
          type: string
        value:
          description: property value
          type: string
        encrypted:
          description: is property encrypted or not?
          type: boolean
        dynamic:
          description: is a dynamic property or not?
          type: boolean
        encryptable:
          description: is property encryptable?
          type: boolean
          writeOnly: true
    Qos:
      type: string
      description: Type of the quality of service.
      examples:
        - NONE
      default: AUTO
      enum:
        - NONE
        - AUTO
        - AT_MOST_ONCE
        - AT_LEAST_ONCE
    Resource:
      description: API resource
      type: object
      required:
        - name
        - type
        - configuration
      properties:
        name:
          description: Resource name
          type: string
        type:
          description: Resource type
          type: string
        configuration:
          description: Resource configuration
          type: object
        enabled:
          description: API resource is enabled or not?
          type: boolean
    ResponseTemplate:
      description: API response template
      type: object
      properties:
        status:
          description: API response template status
          type: integer
        headers:
          description: API response template headers
          type: object
          additionalProperties:
            type: string
        body:
          description: API response template body
          type: string
        propagateErrorKeyToLogs:
          type: boolean
    Sampling:
      description: API analytics sampling
      type: object
      properties:
        type:
          type: string
          description: The type of the sampling
          enum:
            - PROBABILITY
            - TEMPORAL
            - COUNT
        value:
          type: string
          description: The value of the sampling
      required:
        - type
    MembershipMemberType:
      type: string
      description: The type of membership
      enum:
        - USER
        - GROUP
      examples:
        - USER
    Selector:
      description: Flow selector
      oneOf:
        - $ref: "#/components/schemas/HttpSelector"
        - $ref: "#/components/schemas/ChannelSelector"
        - $ref: "#/components/schemas/ConditionSelector"
      discriminator:
        propertyName: type
        mapping:
          HTTP: "#/components/schemas/HttpSelector"
          CHANNEL: "#/components/schemas/ChannelSelector"
          CONDITION: "#/components/schemas/ConditionSelector"
    BaseSelector:
      description: Base selector
      properties:
        type:
          type: string
          description: Selector type.
          examples:
            - HTTP
          enum:
            - HTTP
            - CHANNEL
            - CONDITION
      discriminator:
        propertyName: type
        mapping:
          HTTP: "#/components/schemas/HttpSelector"
          CHANNEL: "#/components/schemas/ChannelSelector"
          CONDITION: "#/components/schemas/ConditionSelector"
      required:
        - type
    ServiceV4:
      description: Service
      type: object
      properties:
        overrideConfiguration:
          type: boolean
          description: Override the configuration of the service
          default: false
        configuration:
          type: object
          description: The configuration of the service
        enabled:
          type: boolean
          description: Is the service enabled or not.
          default: true
        type:
          type: string
    BaseStep:
      description: Base step
      type: object
      properties:
        name:
          type: string
          description: The name of the step
        description:
          type: string
          description: The description of the step
        enabled:
          type: boolean
          description: Is the step enabled or not.
          default: true
        policy:
          type: string
          description: The policy of the step
        configuration:
          type: object
          description: The configuration of the step
        condition:
          type: string
          description: The condition of the step
    StepV4:
      description: Flow step
      allOf:
        - $ref: "#/components/schemas/BaseStep"
        - properties:
            messageCondition:
              type: string
              description: The message condition of the step
    SubscriptionListener:
      description: Subscription listener
      title: "SubscriptionListener"
      required:
        - type
      allOf:
        - $ref: "#/components/schemas/BaseListener"
    TcpListener:
      description: TCP listener
      title: "TcpListener"
      required:
        - type
      allOf:
        - $ref: "#/components/schemas/BaseListener"
        - type: object
          properties:
            hosts:
              description: >-
                A list of hostnames for which the API will match against SNI. 
                This must be unique for all TCP listener for a given server id. See 'servers' attribute
              type: array
              minItems: 1
              items:
                type: string
                minLength: 1
          required:
            - "hosts"
    KafkaListener:
      description: Kafka listener
      title: "KafkaListener"
      required:
        - type
      allOf:
        - $ref: "#/components/schemas/BaseListener"
        - type: object
          properties:
            host:
              description: A hostname for which the API will match against SNI.
              type: string
            port:
              type: integer
              minimum: 0
              description: The port of the listener
              examples:
                - 8080
          required:
            - "host"

    # Failover v4
    FailoverV4:
      description: API Failover
      type: object
      properties:
        enabled:
          type: boolean
          description: Is the failover enabled.
          default: false
        maxRetries:
          type: integer
          format: int32
          description: The maximum number of retries.
          default: 2
          minimum: 0
        slowCallDuration:
          type: integer
          format: int64
          description: The duration in milliseconds to consider a request as slow.
          default: 2000
          minimum: 50
        openStateDuration:
          type: integer
          format: int64
          description: The duration in milliseconds to indicate how long the circuit breaker should stay open, before it switches to half open.
          default: 10000
          minimum: 500
        maxFailures:
          type: integer
          format: int32
          description: The maximum number of failures allowed before the circuit breaker can calculate the error rate.
          default: 5
          minimum: 1
        perSubscription:
          type: boolean
          description: If true, a circuit breaker breaker will be dedicated for each subscriber, else, one and only circuit breaker will be used for the API.
          default: true

    # Metadata Page
    Metadata:
      description: Metadata is a generic data structure used internally
      type: object
      properties:
        key:
          type: string
          description: The key of the metadata if different from sanitized name (lowercase + hyphens).
          minLength: 1
        name:
          type: string
          description: The name of the metadata.
        format:
          $ref: "#/components/schemas/MetadataFormat"
        value:
          type: string
          description: The value of the metadata.
          minLength: 1
        defaultValue:
          type: string
          description: The default value of the metadata if the value is not set.
      required:
        - name
        - format
    MetadataFormat:
      type: string
      description: The format of the metadata.
      examples:
        - STRING
      enum:
        - STRING
        - NUMERIC
        - BOOLEAN
        - DATE
        - MAIL
        - URL

    LifecycleState:
      type: string
      description: The state of the API regarding the gateway(s).
      examples:
        - STARTED
      enum:
        - CLOSED
        - INITIALIZED
        - STARTED
        - STOPPED
        - STOPPING
    HttpError:
      description: Error
      type: object
      properties:
        httpStatus:
          type: integer
          format: int32
          description: Error code
          examples:
            - 400
        message:
          type: string
          description: Error message
          examples:
            - Bad request
        technicalCode:
          type: string
          description: A technical code to identify the error
          examples:
            - invalid.import.definition
        parameters:
          type: object
          description: A map of parameters to be used in the error message
          additionalProperties:
            type: string
        details:
          type: array
          description: A list of details about the error
          items:
            type: object
            properties:
              message:
                type: string
                description: The error message
                examples:
                  - Bad request
              location:
                type: string
                description: The json path of the field in error.
                examples:
                  - updateApi.properties[0].key
              invalidValue:
                type: string
                description: The invalid value.

    Errors:
      description: >-
        When a resource has been created regardless of errors, this field
        is used to persist the error message encountered during validation
      properties:
        severe:
          description: >-
            Severe errors do not pass validation and will block
            creation/update/delete hence, this field should always be populated during the validation
            phase and is very unlikely to be persisted client side.
          items:
            type: string
          type: array
        warning:
          description: >-
            Warning errors do not block object creation/update/delete,
            most of the time because the value is ignored or defaulted.
          items:
            type: string
          type: array
      type: object

  responses:
    NotFound:
        description: Resource not found
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HttpError"
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/HttpError"
    Unauthenticated:
      description: Unauthenticated
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/HttpError"
    BadRequest:
      description: Request is invalid
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/HttpError"
    Error:
      description: Default error
      content:
        application/json:
          schema:
            type: object
            allOf:
              - $ref: "#/components/schemas/HttpError"
  parameters:
    envIdParam:
      name: envId
      in: path
      required: true
      description: environment ID
      schema:
        type: string
        default: DEFAULT
    orgIdParam:
      name: orgId
      in: path
      required: true
      description: organization ID
      schema:
        type: string
        default: DEFAULT
    dryRunQueryParam:
      name: dryRun
      in: query
      description: |
        For modifying requests, this parameter allow you to test the result of an endpoint without actually persisting 
        the state of the underlying spec.
      schema:
        type: boolean
        default: false
    hridParam:
      name: hrid
      in: path
      required: true
      description: Human-readable ID of a spec
      schema:
        type: string
  securitySchemes:
    BasicAuth:
      description: Basic authentication
      type: http
      scheme: basic
    BearerAuth:
      description: Service account authentication
      type: http
      scheme: bearer
      bearerFormat: APIM service account token
    CloudAuth:
      description: Gravitee Cloud Token authentication
      type: http
      scheme: bearer
      bearerFormat: JWT