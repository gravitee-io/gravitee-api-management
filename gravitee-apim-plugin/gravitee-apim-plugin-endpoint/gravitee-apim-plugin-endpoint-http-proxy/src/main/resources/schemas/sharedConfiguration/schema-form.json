{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "type": "object",
    "definitions": {
        "clearTextUpgrade": {
            "title": "Allow h2c Clear Text Upgrade",
            "type": "boolean",
            "default": true,
            "gioConfig": {
                "banner": {
                    "title": "HTTP/2 Cleartext (H2C)",
                    "text": "If enabled, an h2c connection is established using an HTTP/1.1 upgrade request. If disabled, h2c connection is established directly (with prior knowledge)."
                }
            }
        },
        "keepAlive": {
            "title": "Enable keep-alive",
            "type": "boolean",
            "default": true,
            "gioConfig": {
                "banner": {
                    "title": "Enable keep-alive",
                    "text": "Use an HTTP persistent connection to send and receive multiple HTTP requests / responses."
                }
            }
        },
        "keepAliveTimeout": {
            "type": "integer",
            "title": "Keep-alive timeout (ms)",
            "description": "Maximum time a connection will remain unused in the pool in milliseconds. Once the timeout has elapsed, the unused connection will be evicted.",
            "default": 30000
        },
        "connectTimeout": {
            "type": "integer",
            "title": "Connect timeout (ms)",
            "description": "Maximum time to connect to the backend in milliseconds.",
            "default": 3000
        },
        "pipelining": {
            "title": "Enable HTTP pipelining",
            "type": "boolean",
            "default": false,
            "gioConfig": {
                "banner": {
                    "title": "Enable HTTP pipelining",
                    "text": "When pipe-lining is enabled requests will be written to connections without waiting for previous responses to return"
                }
            }
        },
        "readTimeout": {
            "type": "integer",
            "title": "Read timeout (ms)",
            "description": "Maximum time given to the backend to complete the request (including response) in milliseconds.",
            "default": 10000
        },
        "useCompression": {
            "title": "Enable compression (gzip, deflate)",
            "type": "boolean",
            "default": true,
            "gioConfig": {
                "banner": {
                    "title": "Enable compression (gzip, deflate)",
                    "text": "The gateway can let the remote http server know that it supports compression. In case the remote http server returns a compressed response, the gateway will decompress it. Leave that option off if you don't want compression between the gateway and the remote server."
                }
            }
        },
        "propagateClientAcceptEncoding": {
            "title": "Propagate client Accept-Encoding header",
            "description": "Accept-Encoding can only be propagated if \"Enable compression\" is disabled.",
            "type": "boolean",
            "gioConfig": {
                "banner": {
                    "title": "Propagate client Accept-Encoding header (no decompression if any)",
                    "text": "If the client request header includes a value for Accept-Encoding, the gateway will propagate it to the backend. The gateway will NEVER attempt to decompress the body content if the backend response is compressed (gzip, deflate). Therefore, transformation policies cannot be applied if the content body is compressed. If logging is enabled for the API, the compressed content body will be logged as is without any transformation applied. DO NOT activate this option if you plan to interact with body responses."
                },
              "disableIf": {
                "$eq": {
                  "value.http.useCompression": true
                }
              }
            }
        },
        "propagateClientHost": {
          "title": "Propagate client Host header",
          "type": "boolean",
          "default": false,
          "gioConfig": {
            "banner": {
              "title": "Propagate client Host header",
              "text": "<ul><li>If not activated (default), the Gateway uses the endpoint target host if the host header value of the original request is unchanged after policy execution else use changed value.</li><li>If activated, the host header propagated by the gateway to the backend is the value specified by the client request, possibly changed by the policies execution.</li></ul> <i>If the host header is null, the Gateway uses the endpoint target host.</i>"
            }
          }
        },
        "idleTimeout": {
            "type": "integer",
            "title": "Idle timeout (ms)",
            "default": 60000,
            "gioConfig": {
                "banner": {
                    "title": "Idle timeout",
                    "text": "Maximum time a connection will be opened if no data is received nor sent. Once the timeout has elapsed, the unused connection will be closed, allowing to free the associated resources."
                }
            }
        },
        "followRedirects": {
            "title": "Follow HTTP redirects",
            "type": "boolean",
            "default": false,
            "gioConfig": {
                "banner": {
                    "title": "Follow HTTP redirects",
                    "text": "When the connector receives a status code in the range 3xx from the backend, it follows the redirection provided by the Location response header."
                }
            }
        },
        "maxConcurrentConnections": {
            "type": "integer",
            "title": "Max Concurrent Connections",
            "description": "Maximum pool size for connections.",
            "default": 20
        },
        "http2MultiplexingLimit": {
            "type": "integer",
            "title": "Max concurrent stream for an HTTP/2 connection",
            "default": -1,
            "gioConfig": {
                "banner": {
                    "title": "Max concurrent stream for an HTTP/2 connection",
                    "text": "The maximum number of concurrent streams allowed for each HTTP/2 connection. The actual number of streams per connection is the minimum of this value and the server's initial settings. For example, if set to 10 and the server's initial setting is 1000, the max number of streams will be 10. If set to -1, the server's initial settings will be used. -1 is the default."
                }
            }
        },
        "http": {
            "type": "object",
            "title": "Security configuration",
            "oneOf": [
                {
                    "title": "HTTP 1.1",
                    "properties": {
                        "version": {
                            "const": "HTTP_1_1"
                        },
                        "keepAlive": {
                            "$ref": "#/definitions/keepAlive"
                        },
                        "keepAliveTimeout": {
                            "$ref": "#/definitions/keepAliveTimeout"
                        },
                        "connectTimeout": {
                            "$ref": "#/definitions/connectTimeout"
                        },
                        "pipelining": {
                            "$ref": "#/definitions/pipelining"
                        },
                        "readTimeout": {
                            "$ref": "#/definitions/readTimeout"
                        },
                        "useCompression": {
                            "$ref": "#/definitions/useCompression"
                        },
                        "propagateClientAcceptEncoding": {
                            "$ref": "#/definitions/propagateClientAcceptEncoding"
                        },
                        "propagateClientHost": {
                            "$ref": "#/definitions/propagateClientHost"
                        },
                        "idleTimeout": {
                            "$ref": "#/definitions/idleTimeout"
                        },
                        "followRedirects": {
                            "$ref": "#/definitions/followRedirects"
                        },
                        "maxConcurrentConnections": {
                            "$ref": "#/definitions/maxConcurrentConnections"
                        }
                    },
                    "required": ["connectTimeout", "readTimeout", "idleTimeout", "maxConcurrentConnections"],
                    "additionalProperties": false
                },
                {
                    "title": "HTTP 2",
                    "properties": {
                        "version": {
                            "const": "HTTP_2"
                        },
                        "clearTextUpgrade": {
                            "$ref": "#/definitions/clearTextUpgrade"
                        },
                        "keepAlive": {
                            "$ref": "#/definitions/keepAlive"
                        },
                        "keepAliveTimeout": {
                            "$ref": "#/definitions/keepAliveTimeout"
                        },
                        "connectTimeout": {
                            "$ref": "#/definitions/connectTimeout"
                        },
                        "pipelining": {
                            "$ref": "#/definitions/pipelining"
                        },
                        "readTimeout": {
                            "$ref": "#/definitions/readTimeout"
                        },
                        "useCompression": {
                            "$ref": "#/definitions/useCompression"
                        },
                        "propagateClientAcceptEncoding": {
                            "$ref": "#/definitions/propagateClientAcceptEncoding"
                        },
                        "propagateClientHost": {
                          "$ref": "#/definitions/propagateClientHost"
                        },
                        "idleTimeout": {
                            "$ref": "#/definitions/idleTimeout"
                        },
                        "followRedirects": {
                            "$ref": "#/definitions/followRedirects"
                        },
                        "maxConcurrentConnections": {
                            "$ref": "#/definitions/maxConcurrentConnections"
                        },
                        "http2MultiplexingLimit": {
                            "$ref": "#/definitions/http2MultiplexingLimit"
                        }
                    },
                    "required": ["connectTimeout", "readTimeout", "idleTimeout", "maxConcurrentConnections"],
                    "additionalProperties": false
                }
            ]
        },
        "headers": {
            "type": "array",
            "title": "HTTP Headers",
            "description": "Default HTTP headers added or overridden by the API gateway to upstream. Supports EL and secrets.",
            "items": {
                "type": "object",
                "title": "Header",
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "value": {
                        "type": "string",
                        "title": "Value"
                    }
                },
                "required": ["name", "value"]
            },
            "gioConfig": {
                "el": true,
                "uiType": "gio-headers-array"
            }
        },
        "proxy": {
            "type": "object",
            "title": "Proxy Options",
            "oneOf": [
                {
                    "title": "No proxy",
                    "properties": {
                        "enabled": {
                            "const": false
                        },
                        "useSystemProxy": {
                            "const": false
                        }
                    },
                    "additionalProperties": false
                },
                {
                    "title": "Use proxy configured at system level",
                    "properties": {
                        "enabled": {
                            "const": true
                        },
                        "useSystemProxy": {
                            "const": true
                        }
                    },
                    "additionalProperties": false
                },
                {
                    "title": "Use proxy for client connections",
                    "properties": {
                        "enabled": {
                            "const": true
                        },
                        "useSystemProxy": {
                            "const": false
                        },
                        "type": {
                            "type": "string",
                            "title": "Proxy Type",
                            "description": "The type of the proxy",
                            "default": "HTTP",
                            "enum": ["HTTP", "SOCKS4", "SOCKS5"]
                        },
                        "host": {
                            "type": "string",
                            "title": "Proxy host",
                            "description": "Proxy host to connect to. Supports EL.",
          "gioConfig": {
            "el": true
          }
                        },
                        "port": {
                            "type": "integer",
                            "title": "Proxy port",
                            "description": "Proxy port to connect to"
                        },
                        "username": {
                            "type": "string",
                            "title": "Proxy username",
                            "description": "Optional proxy username. (Supports EL and secrets)",
          "gioConfig": {
            "el": true
          }
                        },
                        "password": {
                            "type": "string",
                            "title": "Proxy password",
                            "description": "Optional proxy password. (Supports EL and secrets)",
                            "format": "password",
          "gioConfig": {
            "el": true
          }
                        }
                    },
                    "required": ["host", "port"],
                    "additionalProperties": false
                }
            ]
        },
        "sslTrustStoreHostnameVerifier": {
            "title": "Verify Host",
            "description": "Use to enable host name verification",
            "type": "boolean",
            "default": true
        },
        "sslTrustStoreTrustAll": {
            "title": "Trust all",
            "description": "Use this with caution (if over Internet). The gateway must trust any origin certificates. The connection will still be encrypted but this mode is vulnerable to 'man in the middle' attacks.",
            "type": "boolean",
            "default": false
        },
        "sslTrustStorePassword": {
            "type": "string",
            "title": "Password",
            "description": "Truststore password",
            "format": "password",
            "gioConfig": {
                "banner": {
                    "title": "SSL truststore password",
                    "text": "The password for the truststore file. If a password is not set, truststore file configured will still be used, but integrity checking is disabled. Truststore password is not supported for PEM format."
                }
            }
        },
        "sslTrustStorePath": {
            "type": "string",
            "title": "Path to truststore",
            "description": "Path to the truststore file",
            "gioConfig": {
              "el": true
            }
        },
        "sslTrustStoreContent": {
            "type": "string",
            "title": "Content",
            "description": "Binary content as Base64",
            "format": "text",
            "gioConfig": {
              "el": true
            }
        },
        "sslKeyStorePassword": {
            "type": "string",
            "title": "Password",
            "description": "Password to use to open the key store",
            "format": "password",
            "gioConfig": {
              "el": true
            }
        },
        "sslKeyStoreAlias": {
            "type": "string",
            "title": "Alias for the key",
            "description": "Alias of the key to use in case the key store contains more than one key",
            "gioConfig": {
              "el": true
            }
        },
        "sslKeyStoreKeyPassword": {
            "type": "string",
            "title": "Key Password",
            "description": "Password to use to access the key when protected by password",
            "format": "password",
            "gioConfig": {
              "el": true
            }
        },
        "sslKeyStorePath": {
            "type": "string",
            "title": "Path to key store",
            "description": "Path to the key store file",
            "gioConfig": {
              "el": true
            }
        },
        "sslKeyStoreContent": {
            "type": "string",
            "title": "Content",
            "description": "Binary content as Base64",
            "format": "text",
            "gioConfig": {
                "el": true
            }
        },
        "sslKeyStoreCertPath": {
            "type": "string",
            "title": "Path to cert file",
            "description": "Path to cert file (.PEM)",
            "gioConfig": {
                "el": true
            }
        },
        "sslKeyStoreCertContent": {
            "type": "string",
            "title": "Certificate",
            "format": "text",
            "gioConfig": {
              "el": true
            }
        },
        "sslKeyStoreKeyPath": {
            "type": "string",
            "title": "Path to private key file",
            "description": "Path to private key file (.PEM)",
          "gioConfig": {
            "el": true
          }
        },
        "sslKeyStoreKeyContent": {
            "type": "string",
            "title": "Private key",
            "format": "text",
          "gioConfig": {
            "el": true
          }
        },
        "ssl": {
            "type": "object",
            "title": "SSL Options",
            "properties": {
                "hostnameVerifier": {
                    "$ref": "#/definitions/sslTrustStoreHostnameVerifier"
                },
                "trustAll": {
                    "$ref": "#/definitions/sslTrustStoreTrustAll"
                },
                "trustStore": {
                    "type": "object",
                    "title": "Truststore",
                    "description": "All fields supports EL and secrets",
                    "oneOf": [
                        {
                            "type": "object",
                            "title": "None",
                            "properties": {
                                "type": {
                                    "const": ""
                                }
                            }
                        },
                        {
                            "type": "object",
                            "title": "JKS with path",
                            "properties": {
                                "type": {
                                    "const": "JKS"
                                },
                                "password": {
                                    "$ref": "#/definitions/sslTrustStorePassword"
                                },
                                "path": {
                                    "$ref": "#/definitions/sslTrustStorePath"
                                }
                            },
                            "required": ["password", "path"]
                        },
                        {
                            "type": "object",
                            "title": "JKS with content",
                            "properties": {
                                "type": {
                                    "const": "JKS"
                                },
                                "password": {
                                    "$ref": "#/definitions/sslTrustStorePassword"
                                },
                                "content": {
                                    "$ref": "#/definitions/sslTrustStoreContent"
                                }
                            },
                            "required": ["password", "content"]
                        },
                        {
                            "type": "object",
                            "title": "PKCS#12 / PFX with path",
                            "properties": {
                                "type": {
                                    "const": "PKCS12"
                                },
                                "password": {
                                    "$ref": "#/definitions/sslTrustStorePassword"
                                },
                                "path": {
                                    "$ref": "#/definitions/sslTrustStorePath"
                                }
                            },
                            "required": ["password", "path"]
                        },
                        {
                            "type": "object",
                            "title": "PKCS#12 / PFX with content",
                            "properties": {
                                "type": {
                                    "const": "PKCS12"
                                },
                                "password": {
                                    "$ref": "#/definitions/sslTrustStorePassword"
                                },
                                "content": {
                                    "$ref": "#/definitions/sslTrustStoreContent"
                                }
                            },
                            "required": ["password", "content"]
                        },
                        {
                            "type": "object",
                            "title": "PEM with path",
                            "properties": {
                                "type": {
                                    "const": "PEM"
                                },
                                "password": {
                                    "$ref": "#/definitions/sslTrustStorePassword"
                                },
                                "path": {
                                    "$ref": "#/definitions/sslTrustStorePath"
                                }
                            },
                            "required": ["password", "path"]
                        },
                        {
                            "type": "object",
                            "title": "PEM with content",
                            "properties": {
                                "type": {
                                    "const": "PEM"
                                },
                                "password": {
                                    "$ref": "#/definitions/sslTrustStorePassword"
                                },
                                "content": {
                                    "$ref": "#/definitions/sslTrustStoreContent"
                                }
                            },
                            "required": ["password", "content"]
                        }
                    ]
                },
                "keyStore": {
                    "type": "object",
                    "title": "Key store",
                    "description": "All fields supports EL and secrets",
                    "oneOf": [
                        {
                            "type": "object",
                            "title": "None",
                            "properties": {
                                "type": {
                                    "const": ""
                                }
                            }
                        },
                        {
                            "type": "object",
                            "title": "JKS with path",
                            "properties": {
                                "type": {
                                    "const": "JKS"
                                },
                                "password": {
                                    "$ref": "#/definitions/sslKeyStorePassword"
                                },
                                "alias": {
                                    "$ref": "#/definitions/sslKeyStoreAlias"
                                },
                                "keyPassword": {
                                    "$ref": "#/definitions/sslKeyStoreKeyPassword"
                                },
                                "path": {
                                    "$ref": "#/definitions/sslKeyStorePath"
                                }
                            },
                            "required": ["password", "path"]
                        },
                        {
                            "type": "object",
                            "title": "JKS with content",
                            "properties": {
                                "type": {
                                    "const": "JKS"
                                },
                                "password": {
                                    "$ref": "#/definitions/sslKeyStorePassword"
                                },
                                "alias": {
                                    "$ref": "#/definitions/sslKeyStoreAlias"
                                },
                                "keyPassword": {
                                    "$ref": "#/definitions/sslKeyStoreKeyPassword"
                                },
                                "content": {
                                    "$ref": "#/definitions/sslKeyStoreContent"
                                }
                            },
                            "required": ["password", "content"]
                        },
                        {
                            "type": "object",
                            "title": "PKCS#12 / PFX with path",
                            "properties": {
                                "type": {
                                    "const": "PKCS12"
                                },
                                "password": {
                                    "$ref": "#/definitions/sslKeyStorePassword"
                                },
                                "alias": {
                                    "$ref": "#/definitions/sslKeyStoreAlias"
                                },
                                "keyPassword": {
                                    "$ref": "#/definitions/sslKeyStoreKeyPassword"
                                },
                                "path": {
                                    "$ref": "#/definitions/sslKeyStorePath"
                                }
                            },
                            "required": ["password", "path"]
                        },
                        {
                            "type": "object",
                            "title": "PKCS#12 / PFX with content",
                            "properties": {
                                "type": {
                                    "const": "PKCS12"
                                },
                                "password": {
                                    "$ref": "#/definitions/sslKeyStorePassword"
                                },
                                "alias": {
                                    "$ref": "#/definitions/sslKeyStoreAlias"
                                },
                                "keyPassword": {
                                    "$ref": "#/definitions/sslKeyStoreKeyPassword"
                                },
                                "content": {
                                    "$ref": "#/definitions/sslKeyStoreContent"
                                }
                            },
                            "required": ["password", "content"]
                        },
                        {
                            "type": "object",
                            "title": "PEM with path",
                            "properties": {
                                "type": {
                                    "const": "PEM"
                                },
                                "certPath": {
                                    "$ref": "#/definitions/sslKeyStoreCertPath"
                                },
                                "keyPath": {
                                    "$ref": "#/definitions/sslKeyStoreKeyPath"
                                }
                            },
                            "required": ["certPath", "keyPath"]
                        },
                        {
                            "type": "object",
                            "title": "PEM with content",
                            "properties": {
                                "type": {
                                    "const": "PEM"
                                },
                                "certContent": {
                                    "$ref": "#/definitions/sslKeyStoreCertContent"
                                },
                                "keyContent": {
                                    "$ref": "#/definitions/sslKeyStoreKeyContent"
                                }
                            },
                            "required": ["certContent", "keyContent"]
                        }
                    ]
                }
            }
        }
    },
    "properties": {
        "http": {
            "$ref": "#/definitions/http"
        },
        "headers": {
            "$ref": "#/definitions/headers"
        },
        "proxy": {
            "$ref": "#/definitions/proxy"
        },
        "ssl": {
            "$ref": "#/definitions/ssl"
        }
    }
}
