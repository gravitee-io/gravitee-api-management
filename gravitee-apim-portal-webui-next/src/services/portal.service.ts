/*
 * Copyright (C) 2024 The Gravitee team (http://gravitee.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Gravitee.io Portal Rest API
 * API dedicated to the devportal part of Gravitee
 *
 * Contact: contact@graviteesource.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { HttpClient, HttpParams } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable, map } from 'rxjs';

import { ConfigService } from './config.service';
import { ApiInformation } from '../entities/api/api-information';
import { PortalPage } from '../entities/portal/portal-page';

@Injectable({
  providedIn: 'root',
})
export class PortalService {
  constructor(
    private readonly http: HttpClient,
    private configService: ConfigService,
  ) {}

  public getApiInformations(apiId: string): Observable<ApiInformation[]> {
    return this.http.get<ApiInformation[]>(`${this.configService.baseURL}/apis/${apiId}/informations`);
  }

  public getPortalHomepages(expands?: string): Observable<PortalPage[]> {
    let params = new HttpParams().set('type', 'HOMEPAGE');

    if (expands) {
      params = params.set('expands', expands);
    }

    return this.http
      .get<{ pages: PortalPage[] }>(`${this.configService.baseURL}/portal-pages`, { params })
      .pipe(map(resp => resp?.pages ?? []));
  }
}
