{{- if and (.Values.gateway.enabled) (or (not (include "gateway.externalConfig" .)) (.Values.gateway.logging.debug)) -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "gravitee.gateway.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ template "gravitee.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/version: {{ .Values.gateway.image.tag | default .Chart.AppVersion | quote }}
    app.kubernetes.io/component: "{{ .Values.gateway.name }}"
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    {{- if and .Values.common .Values.common.labels }}
    {{- range $key, $value := .Values.common.labels }}
    {{ $key }}: {{ $value | quote }}
    {{- end }}
    {{- end }}
  annotations:
    {{- if .Values.common.annotations }}
    {{- range $key, $value := .Values.common.annotations }}
    {{ $key }}: {{ $value | quote }}
    {{- end }}
    {{- end }}
data:
  {{- if not (include "gateway.externalConfig" .)}}
  gravitee.yml: |
    # Gateway HTTP server
    {{- if .Values.gateway.servers }}
    # add support for multi-servers (both http and tcp)
    servers:
      {{- range $i, $server := .Values.gateway.servers }}
      - type: {{ $server.type }}
        port: {{ $server.port }}
        host: 0.0.0.0
        {{- if $server.idleTimeout }}
        idleTimeout: {{ $server.idleTimeout }}
        {{- end }}
        {{- if $server.tcpKeepAlive }}
        tcpKeepAlive: {{ $server.tcpKeepAlive }}
        {{- end }}
        {{- if $server.compressionSupported }}
        compressionSupported: {{ $server.compressionSupported }}
        {{- end }}
        {{- if $server.instances }}
        instances: {{ $server.instances }}
        {{- end }}
        {{- if $server.requestTimeout }}
        requestTimeout: {{ $server.requestTimeout }}
        {{- end }}
        {{- if $server.requestTimeoutGraceDelay }}
        requestTimeoutGraceDelay: {{ $server.requestTimeoutGraceDelay }}
        {{- end }}
        {{- if $server.maxHeaderSize }}
        maxHeaderSize: {{ $server.maxHeaderSize }}
        {{- end }}
        {{- if $server.maxChunkSize }}
        maxChunkSize: {{ $server.maxChunkSize }}
        {{- end }}
        {{- if $server.maxInitialLineLength }}
        maxInitialLineLength: {{ $server.maxInitialLineLength }}
        {{- end }}
        {{- if $server.maxFormAttributeSize }}
        maxFormAttributeSize: {{ $server.maxFormAttributeSize }}
        {{- end }}
        {{- if $server.alpn }}
        alpn: {{ $server.alpn | default "true" }}
        {{- end }}
        {{- if $server.ssl }}
        secured: true
        ssl:
          keystore:
            {{- if $server.ssl.keystore.type }}
            type: {{ $server.ssl.keystore.type }}
            {{- end }}
            {{- if $server.ssl.keystore.path }}
            path: {{ $server.ssl.keystore.path }}
            {{- end }}
            {{- if $server.ssl.keystore.password }}
            password: {{ $server.ssl.keystore.password | quote }}
            {{- end }}
            {{- if $server.ssl.keystore.kubernetes }}
            kubernetes: {{ $server.ssl.keystore.kubernetes }}
            {{- end }}
            {{- if hasKey $server.ssl.keystore "watch" }}
            watch: {{ $server.ssl.keystore.watch }}
            {{- end }}
            {{- if hasKey $server.ssl.keystore "secret" }}
            secret: {{ $server.ssl.keystore.secret }}
            {{- end }}
          clientAuth: {{ $server.ssl.clientAuth }}
          {{- if $server.ssl.truststore }}
          truststore:
            {{- if $server.ssl.truststore.type }}
            type: {{ $server.ssl.truststore.type }}
            {{- end }}
            path: {{ $server.ssl.truststore.path }}
            password: {{ $server.ssl.truststore.password | quote }}
          {{- end }}
          {{- if $server.ssl.sni }}
          sni: true
          {{- end }}
        {{- end }}
        {{- if $server.websocket }}
        websocket: {{ toYaml $server.websocket | nindent 10 }}
        {{- end }}
        {{- if $server.haproxy }}
        haproxy: {{ toYaml $server.haproxy | nindent 10 }}
        {{- end }}
    {{- end }}
    {{- else }}
    http:
      port: {{ .Values.gateway.service.internalPort }}
      host: 0.0.0.0
    #  idleTimeout: 0
    #  tcpKeepAlive: true
    #  compressionSupported: false
    #  instances: 0
      requestTimeout: {{ .Values.gateway.http.requestTimeout }}
      requestTimeoutGraceDelay: {{ .Values.gateway.http.requestTimeoutGraceDelay }}
      maxHeaderSize: {{ .Values.gateway.http.maxHeaderSize }}
      maxChunkSize: {{ .Values.gateway.http.maxChunkSize }}
      maxInitialLineLength: {{ .Values.gateway.http.maxInitialLineLength }}
      maxFormAttributeSize: {{ .Values.gateway.http.maxFormAttributeSize }}
      alpn: {{ .Values.gateway.http.alpn | default "true" }}
      {{- if .Values.gateway.ssl.enabled }}
      secured: true
      ssl:
        keystore:
          {{- if .Values.gateway.ssl.keystore.type }}
          type: {{ .Values.gateway.ssl.keystore.type }}
          {{- end }}
          {{- if .Values.gateway.ssl.keystore.path }}
          path: {{ .Values.gateway.ssl.keystore.path }}
          {{- end }}
          {{- if .Values.gateway.ssl.keystore.password }}
          password: {{ .Values.gateway.ssl.keystore.password | quote }}
          {{- end }}
          {{- if .Values.gateway.ssl.keystore.kubernetes }}
          kubernetes: {{ .Values.gateway.ssl.keystore.kubernetes }}
          {{- end }}
          {{- if hasKey .Values.gateway.ssl.keystore "watch" }}
          watch: {{ .Values.gateway.ssl.keystore.watch }}
          {{- end }}
          {{- if hasKey .Values.gateway.ssl.keystore "secret" }}
          secret: {{ .Values.gateway.ssl.keystore.secret }}
          {{- end }}
        clientAuth: {{ .Values.gateway.ssl.clientAuth }}
        {{- if .Values.gateway.ssl.truststore }}
        truststore:
          {{- if .Values.gateway.ssl.truststore.type }}
          type: {{ .Values.gateway.ssl.truststore.type }}
          {{- end }}
          path: {{ .Values.gateway.ssl.truststore.path }}
          password: {{ .Values.gateway.ssl.truststore.password | quote }}
        {{- end }}
        {{- if .Values.gateway.ssl.sni }}
        sni: true
        {{- end }}
      {{- end }}
      websocket:
        enabled: {{ .Values.gateway.websocket }}
      {{- if .Values.gateway.haproxy }}
      haproxy: {{ toYaml .Values.gateway.haproxy | nindent 8 }}
      {{- end }}
    {{- end }}
    {{- if hasKey .Values.gateway "kafka" }}
    kafka:
      enabled: {{ .Values.gateway.kafka.enabled }}
      {{- if hasKey .Values.gateway.kafka "routingMode" }}
      routingMode: {{ .Values.gateway.kafka.routingMode }}
      {{- end}}
      {{- if hasKey .Values.gateway.kafka "routingHostMode" }}
      routingHostMode:
        {{- if hasKey .Values.gateway.kafka.routingHostMode "brokerPrefix" }}
        brokerPrefix: {{ .Values.gateway.kafka.routingHostMode.brokerPrefix | quote }}
        {{- end}}
        {{- if hasKey .Values.gateway.kafka.routingHostMode "domainSeparator" }}
        domainSeparator: {{ .Values.gateway.kafka.routingHostMode.domainSeparator | quote }}
        {{- end}}
        {{- if hasKey .Values.gateway.kafka.routingHostMode "defaultDomain" }}
        defaultDomain: {{ .Values.gateway.kafka.routingHostMode.defaultDomain | quote }}
        {{- end}}
        {{- if hasKey .Values.gateway.kafka.routingHostMode "defaultPort" }}
        defaultPort: {{ .Values.gateway.kafka.routingHostMode.defaultPort }}
        {{- end}}
        {{- if hasKey .Values.gateway.kafka.routingHostMode "bootstrapDomainPattern" }}
        bootstrapDomainPattern: {{ .Values.gateway.kafka.routingHostMode.bootstrapDomainPattern | quote }}
        {{- end}}
        {{- if hasKey .Values.gateway.kafka.routingHostMode "brokerDomainPattern" }}
        brokerDomainPattern: {{ .Values.gateway.kafka.routingHostMode.brokerDomainPattern | quote }}
        {{- end}}
      {{- end}}
      {{- if hasKey .Values.gateway.kafka "apiKey" }}
      api-key:
        {{- if hasKey .Values.gateway.kafka.apiKey "securityMechanisms" }}
        securityMechanisms: {{ .Values.gateway.kafka.apiKey.securityMechanisms }}
        {{- end}}
      {{- end}}

      {{- if hasKey .Values.gateway.kafka "port" }}
      port: {{ .Values.gateway.kafka.port }}
      {{- end}}
      {{- if hasKey .Values.gateway.kafka "host" }}
      host: {{ .Values.gateway.kafka.host }}
      {{- end}}
      {{- if hasKey .Values.gateway.kafka "idleTimeout" }}
      idleTimeout: {{ .Values.gateway.kafka.idleTimeout }}
      {{- end}}
      {{- if hasKey .Values.gateway.kafka "tcpKeepAlive" }}
      tcpKeepAlive: {{ .Values.gateway.kafka.tcpKeepAlive }}
      {{- end}}
      {{- if hasKey .Values.gateway.kafka "instances" }}
      instances: {{ .Values.gateway.kafka.instances }}
      {{- end}}
      {{- if hasKey .Values.gateway.kafka "requestTimeout" }}
      requestTimeout: {{ .Values.gateway.kafka.requestTimeout }}
      {{- end}}
      {{- if hasKey .Values.gateway.kafka "secured" }}
      secured: {{ .Values.gateway.kafka.secured }}
      {{- end}}
      {{- if .Values.gateway.kafka.ssl }}
      ssl:
        {{- if hasKey .Values.gateway.kafka.ssl "sni" }}
        sni: {{ .Values.gateway.kafka.ssl.sni }}
        {{- end}}
        {{- if hasKey .Values.gateway.kafka.ssl "clientAuth" }}
        clientAuth: {{ .Values.gateway.kafka.ssl.clientAuth }}
        {{- end}}
        {{- if hasKey .Values.gateway.kafka.ssl "tlsProtocols" }}
        tlsProtocols: {{ .Values.gateway.kafka.ssl.tlsProtocols }}
        {{- end}}
        {{- if hasKey .Values.gateway.kafka.ssl "tlsCiphers" }}
        tlsCiphers: {{ .Values.gateway.kafka.ssl.tlsCiphers }}
        {{- end}}
        {{- if .Values.gateway.kafka.ssl.keystore }}
        keystore:
          {{- if .Values.gateway.kafka.ssl.keystore.type }}
          type: {{ .Values.gateway.kafka.ssl.keystore.type }}
          {{- end }}
          {{- if .Values.gateway.kafka.ssl.keystore.path }}
          path: {{ .Values.gateway.kafka.ssl.keystore.path }}
          {{- end }}
          {{- if .Values.gateway.kafka.ssl.keystore.certificates }}
          certificates:
            {{- range .Values.gateway.kafka.ssl.keystore.certificates }}
            - cert: {{ .cert }}
              key: {{ .key }}
            {{- end }}
          {{- end}}
          {{- if .Values.gateway.kafka.ssl.keystore.password }}
          password: {{ .Values.gateway.kafka.ssl.keystore.password | quote }}
          {{- end }}
          {{- if hasKey .Values.gateway.kafka.ssl.keystore "watch" }}
          watch: {{ .Values.gateway.kafka.ssl.keystore.watch }}
          {{- end }}
          {{- if hasKey .Values.gateway.kafka.ssl.keystore "defaultAlias" }}
          defaultAlias: {{ .Values.gateway.kafka.ssl.keystore.defaultAlias }}
          {{- end }}
          {{- if hasKey .Values.gateway.kafka.ssl.keystore "secret" }}
          secret: {{ .Values.gateway.kafka.ssl.keystore.secret }}
          {{- end }}
        {{- end }}
        {{- if .Values.gateway.kafka.ssl.truststore }}
        truststore:
          {{- if .Values.gateway.kafka.ssl.truststore.type }}
          type: {{ .Values.gateway.kafka.ssl.truststore.type }}
          {{- end }}
          {{- if .Values.gateway.kafka.ssl.truststore.path }}
          path: {{ .Values.gateway.kafka.ssl.truststore.path }}
          {{- end }}
          {{- if .Values.gateway.kafka.ssl.truststore.password }}
          password: {{ .Values.gateway.kafka.ssl.truststore.password | quote }}
          {{- end }}
          {{- if hasKey .Values.gateway.kafka.ssl.truststore "watch" }}
          watch: {{ .Values.gateway.kafka.ssl.truststore.watch }}
          {{- end }}
        {{- end }}
        {{- if hasKey .Values.gateway.kafka.ssl "openssl" }}
        openssl: {{ .Values.gateway.kafka.ssl.openssl }}
        {{- end}}
      {{- end }}

      {{- if hasKey .Values.gateway.kafka "probe" }}
      probe:
        {{- if hasKey .Values.gateway.kafka.probe "protocol" }}
        protocol: {{ .Values.gateway.kafka.probe.protocol }}
        {{- end}}
        {{- if hasKey .Values.gateway.kafka.probe "properties" }}
        properties:
          {{- range $key,$value := .Values.gateway.kafka.probe.properties }}
          {{$key}}: {{$value}}
          {{- end}}
        {{- end}}
      {{- end}}
    {{- end }}
    management:
    {{- if .Values.gateway.dbLess }}
      type: {{ "none" }}
    {{- else }}
      type: {{ .Values.management.type | default "mongodb" }}
      {{- if or (eq .Values.management.type "mongodb") (kindIs "invalid" .Values.management.type) }}
      mongodb:
        sslEnabled: {{ .Values.mongo.sslEnabled }}
        socketKeepAlive: {{ .Values.mongo.socketKeepAlive }}
        {{- if .Values.mongo.uri }}
        uri: {{ .Values.mongo.uri }}
        {{- else if .Values.mongo.servers }}
        servers:
          {{- .Values.mongo.servers | nindent 10 }}
        dbname: {{ .Values.mongo.dbname }}
        {{- if (eq .Values.mongo.auth.enabled true) }}
        username: {{ .Values.mongo.auth.username }}
        password: {{ .Values.mongo.auth.password }}
        authSource: {{ .Values.mongo.auth.source | default "gravitee" }}
        {{- end }}
        {{- else }}
        uri: mongodb://{{- if (eq .Values.mongo.auth.enabled true) }}{{ .Values.mongo.auth.username }}:{{ .Values.mongo.auth.password }}@{{- end }}{{ .Values.mongo.dbhost }}:{{ .Values.mongo.dbport }}/{{ .Values.mongo.dbname }}?{{- if .Values.mongo.rsEnabled }}&replicaSet={{ .Values.mongo.rs }}{{- end }}{{- if (eq .Values.mongo.auth.enabled true) }}&authSource={{ .Values.mongo.auth.source }}{{- end }}{{- if .Values.mongo.connectTimeoutMS }}&connectTimeoutMS={{ .Values.mongo.connectTimeoutMS }}{{- end }}
        {{- end }}
        {{- if .Values.mongo.keystore }}
        keystore:
        {{- toYaml .Values.mongo.keystore | nindent 10 }}
        {{- end }}
        {{- if .Values.mongo.truststore }}
        truststore:
        {{- toYaml .Values.mongo.truststore | nindent 10 }}
        {{- end }}
      {{- else if (eq .Values.management.type "jdbc") }}
      jdbc:
        url: {{ .Values.jdbc.url }}
        {{- if .Values.jdbc.username }}
        username: {{ .Values.jdbc.username }}
        {{- end }}
        {{- if .Values.jdbc.password }}
        password: {{ .Values.jdbc.password }}
        {{- end }}
        schema: {{ .Values.jdbc.schema | default "public" }}
        liquibase: {{ .Values.jdbc.liquibase }}
        {{- if .Values.jdbc.pool }}
        pool:
          {{ toYaml .Values.jdbc.pool | nindent 10 | trim -}}
        {{- end }}
      {{- else if (eq .Values.management.type "http") }}
      http:
        url: {{ .Values.gateway.management.http.url }}
        keepAlive: {{ if hasKey .Values.gateway.management.http "keepAlive" }}{{ .Values.gateway.management.http.keepAlive }}{{else}}true{{end}}
        idleTimeout: {{ .Values.gateway.management.http.idleTimeout | default 60000 }}
        connectTimeout: {{ .Values.gateway.management.http.connectTimeout | default 5000 }}
        keepAliveTimeout: {{ .Values.gateway.management.http.keepAliveTimeout | default 10000 }}
        useCompression: {{ if hasKey .Values.gateway.management.http "useCompression" }}{{ .Values.gateway.management.http.useCompression }}{{else}}true{{end}}
        followRedirects: {{ .Values.gateway.management.http.followRedirects | default false }}
        clearTextUpgrade: {{ if hasKey .Values.gateway.management.http "clearTextUpgrade" }}{{ .Values.gateway.management.http.clearTextUpgrade }}{{else}}true{{end}}
        version: {{ .Values.gateway.management.http.version | default "HTTP_1_1" }}
        {{- if .Values.gateway.management.http.connectionRetry }}
        connectionRetry:
          delaySec: {{ .Values.gateway.management.http.connectionRetry.delaySec | default 2 }}
          maxDelaySec: {{ .Values.gateway.management.http.connectionRetry.maxDelaySec  | default 60 }}
          backoffFactor: {{ .Values.gateway.management.http.connectionRetry.backoffFactor  | default 1.5 }}
        {{- end}}
        {{- if .Values.gateway.management.http.proxy}}
        proxy:
{{ toYaml .Values.gateway.management.http.proxy | indent 10 -}}
        {{- end }}
        {{- if .Values.gateway.management.http.username }}
        authentication:
          type: basic
          basic:
            username: {{ .Values.gateway.management.http.username }}
            password: {{ .Values.gateway.management.http.password }}
        {{- else if .Values.gateway.management.http.authentication }}
        authentication:
{{ toYaml .Values.gateway.management.http.authentication | indent 10 }}
        {{- end }}
        {{- if .Values.gateway.management.http.ssl }}
        ssl:
          {{- if hasKey .Values.gateway.management.http.ssl "trustall" }}
          trustAll: {{ .Values.gateway.management.http.ssl.trustall }}
          {{- else }}
          trustAll: {{ .Values.gateway.management.http.ssl.trustAll | default false }}
          {{- end}}
          verifyHostname: {{ if hasKey .Values.gateway.management.http.ssl "verifyHostname" }}{{ .Values.gateway.management.http.ssl.verifyHostname }}{{else}}true{{end}}
          {{- if .Values.gateway.management.http.ssl.keystore }}
          keystore:
{{ toYaml .Values.gateway.management.http.ssl.keystore | indent 12 }}
          {{- end }}
          {{- if .Values.gateway.management.http.ssl.truststore }}
          truststore:
{{ toYaml .Values.gateway.management.http.ssl.truststore | indent 12 }}
          {{- end }}
        {{- end }}
      {{- end }}
    {{- end }}

    ratelimit:
      type: {{ .Values.ratelimit.type | default "mongodb" }}
      {{- if or (eq .Values.ratelimit.type "mongodb") (kindIs "invalid" .Values.ratelimit.type) }}
      mongodb:
        sslEnabled: {{ .Values.mongo.sslEnabled }}
        socketKeepAlive: {{ .Values.mongo.socketKeepAlive }}
        {{- if .Values.mongo.uri }}
        uri: {{ .Values.mongo.uri }}
        {{- else if .Values.mongo.servers }}
        servers:
          {{- .Values.mongo.servers | nindent 10 }}
        dbname: {{ .Values.mongo.dbname }}
        {{- if (eq .Values.mongo.auth.enabled true) }}
        username: {{ .Values.mongo.auth.username }}
        password: {{ .Values.mongo.auth.password }}
        authSource: {{ .Values.mongo.auth.source | default "gravitee" }}
        {{- end }}
        {{- else }}
        uri: mongodb://{{- if (eq .Values.mongo.auth.enabled true) }}{{ .Values.mongo.auth.username }}:{{ .Values.mongo.auth.password }}@{{- end }}{{ .Values.mongo.dbhost }}:{{ .Values.mongo.dbport }}/{{ .Values.mongo.dbname }}?{{- if .Values.mongo.rsEnabled }}&replicaSet={{ .Values.mongo.rs }}{{- end }}{{- if (eq .Values.mongo.auth.enabled true) }}&authSource={{ .Values.mongo.auth.source }}{{- end }}{{- if .Values.mongo.connectTimeoutMS }}&connectTimeoutMS={{ .Values.mongo.connectTimeoutMS }}{{- end }}
        {{- end }}
        {{- if .Values.mongo.keystore }}
        keystore:{{- toYaml .Values.mongo.keystore | nindent 10 }}
        {{- end }}
        {{- if .Values.mongo.truststore }}
        truststore:{{- toYaml .Values.mongo.truststore | nindent 10 }}
        {{- end }}
      {{- else if (eq .Values.ratelimit.type "jdbc") }}
      jdbc:
        url: {{ .Values.jdbc.url }}
        {{- if .Values.jdbc.username }}
        username: {{ .Values.jdbc.username }}
        {{- end }}
        {{- if .Values.jdbc.password }}
        password: {{ .Values.jdbc.password }}
        {{- end }}
        schema: {{ .Values.jdbc.schema | default "public" }}
        liquibase: {{ .Values.jdbc.liquibase }}
        {{- if .Values.jdbc.pool }}
        pool:
          {{ toYaml .Values.jdbc.pool | nindent 10 | trim -}}
        {{- end }}
      {{- else if (eq .Values.ratelimit.type "redis") }}
      redis:
        host: {{ .Values.gateway.ratelimit.redis.host }}
        port: {{ .Values.gateway.ratelimit.redis.port }}
        {{- if .Values.gateway.ratelimit.redis.password }}
        password: {{ .Values.gateway.ratelimit.redis.password }}
        {{- end }}
        {{- if .Values.gateway.ratelimit.redis.ssl }}
        ssl: {{ .Values.gateway.ratelimit.redis.ssl }}
        hostnameVerificationAlgorithm: {{ .Values.gateway.ratelimit.redis.hostnameVerificationAlgorithm | default "NONE" }}
        trustAll: {{ if hasKey .Values.gateway.ratelimit.redis "trustAll" }}{{ .Values.gateway.ratelimit.redis.trustAll }}{{else}}true{{end}}
        tlsProtocols: {{ .Values.gateway.ratelimit.redis.tlsProtocols | default "TLSv1.2" }}
        {{- if .Values.gateway.ratelimit.redis.tlsCiphers }}
        tlsCiphers: {{ .Values.gateway.ratelimit.redis.tlsCiphers | quote }}
        {{- end }}
        alpn: {{ .Values.gateway.ratelimit.redis.alpn | default false }}
        openssl: {{ .Values.gateway.ratelimit.redis.openssl | default false }}
        {{/* end of ssl block */}}
        {{- end }}
        {{- if .Values.gateway.ratelimit.redis.keystore }}
        keystore:
          type: {{ .Values.gateway.ratelimit.redis.keystore.type | default "pem" }}
          path: {{ .Values.gateway.ratelimit.redis.keystore.path | default "${gravitee.home}/security/redis-keystore.jks" }}
          password: {{ required "The password required to access the keystore must be provided (i.e.kubernetes://{{NAMESPACE}}/secrets/{{SECRET_NAME}}/{{KEY_NAME}})" .Values.gateway.ratelimit.redis.keystore.password }}
          {{- if .Values.gateway.ratelimit.redis.keystore.keyPassword }}
          keyPassword: {{ .Values.gateway.ratelimit.redis.keystore.keyPassword | quote }}
          {{- end }}
          {{- if .Values.gateway.ratelimit.redis.keystore.alias }}
          alias: {{ .Values.gateway.ratelimit.redis.keystore.alias }}
          {{- end }}
          {{/* guard clause for pem mTLS requirements */}}
          {{- if and ( eq .Values.gateway.ratelimit.redis.keystore.type "pem" ) ( empty .Values.gateway.ratelimit.redis.keystore.certificates ) }}
            {{ fail "When configuring Gravitee to use a keystore for mTLS, your certificates must be provided!" }}
          {{- end }}
          certificates:
            {{- range .Values.gateway.ratelimit.redis.keystore.certificates }}
            - cert: {{ .cert }}
              key: {{ .key }}
            {{- end }}
        {{- end}}
        {{- if .Values.gateway.ratelimit.redis.truststore }}
        truststore:
          type: {{ .Values.gateway.ratelimit.redis.truststore.type | default "pem" }}
          path: {{ .Values.gateway.ratelimit.redis.truststore.path | default "${gravitee.home}/security/redis-truststore.jks" }}
          password: {{ required "The password required to access the truststore must be provided! (i.e.kubernetes://{{NAMESPACE}}/secrets/{{SECRET_NAME}}/{{KEY_NAME}})" .Values.gateway.ratelimit.redis.truststore.password }}
          {{- if .Values.gateway.ratelimit.redis.truststore.alias }}
          alias: {{ .Values.gateway.ratelimit.redis.truststore.alias }}
          {{- end }}
        {{- end }}
        {{- if (not (empty ((.Values.gateway.ratelimit.redis.sentinel).nodes))) }}
        sentinel:
          master: {{ .Values.gateway.ratelimit.redis.sentinel.master }}
          nodes:
            {{- range .Values.gateway.ratelimit.redis.sentinel.nodes }}
            - host: {{ .host }}
              port: {{ .port }}
            {{- end }}
        {{- end }}
        {{- if (not (empty (.Values.gateway.ratelimit.redis.operation))) }}
        operation:
          timeout: {{ .Values.gateway.ratelimit.redis.operation.timeout | default "10" }}
        {{- end }}
        {{- if (not (empty (.Values.gateway.ratelimit.redis.tcp))) }}
        tcp:
          connectTimeout: {{ .Values.gateway.ratelimit.redis.tcp.connectTimeout | default "5000" }}
          idleTimeout: {{ .Values.gateway.ratelimit.redis.tcp.idleTimeout | default "0" }}
        {{- end }}
      {{- end }}

    # Sharding tags configuration
    # Allows to define inclusion/exclusion sharding tags to only deploy a part of APIs. To exclude just prefix the tag with '!'.
    tags: {{ .Values.gateway.sharding_tags }}

    # Multi-tenant configuration
    # Allow only a single-value
    tenant: {{ .Values.gateway.tenant }}

    {{- if .Values.gateway.system}}
    system:
{{ toYaml .Values.gateway.system | indent 6 }}
    {{- end }}

    # Reporters configuration (used to store reporting monitoring data, request metrics, healthchecks and others...
    # All reporters are enabled by default. To stop one of them, you have to add the property 'enabled: false'
    reporters:
      # Elasticsearch reporter
      elasticsearch:
        {{- if ((.Values.gateway).reporters).elasticsearch }}
        {{- if hasKey .Values.gateway.reporters.elasticsearch "enabled" }}
        enabled: {{ .Values.gateway.reporters.elasticsearch.enabled }}
        {{- end }}
        {{- end }}
        {{- with .Values.es.endpoints }}
        endpoints:
          {{ toYaml . | nindent 10 | trim -}}
        {{- end }}
        {{- if .Values.es.index_mode }}
        index_mode: {{ .Values.es.index_mode }}
        {{- end }}
        pipeline:
          plugins:
            ingest: {{ .Values.es.pipeline.plugins.ingest }}
        {{- if (eq .Values.es.lifecycle.enabled true) }}
        lifecycle:
          policy_property_name: {{ .Values.es.lifecycle.policyPropertyName }}
          rollover_alias_property_name: {{ .Values.es.lifecycle.rolloverAliasPropertyName }}
          policies:
            monitor: {{ .Values.es.lifecycle.policies.monitor }}
            request: {{ .Values.es.lifecycle.policies.request }}
            health: {{ .Values.es.lifecycle.policies.health }}
            log: {{ .Values.es.lifecycle.policies.log }}
        {{- end }}
        {{- if (eq .Values.es.security.enabled true) }}
        security:
          username: {{ .Values.es.security.username }}
          password: {{ .Values.es.security.password }}
        {{- end }}
        {{- if (eq .Values.es.ssl.enabled true) }}
        ssl:
          keystore:
            type: {{ .Values.es.ssl.keystore.type }}
            {{- if or .Values.es.ssl.keystore.path .Values.es.ssl.keystore.password }}
            path: {{ .Values.es.ssl.keystore.path }}
            password: {{ .Values.es.ssl.keystore.password }}
            {{- end }}
            {{- if or .Values.es.ssl.keystore.certs .Values.es.ssl.keystore.keys }}
            certs: {{ .Values.es.ssl.keystore.certs }}
            keys: {{ .Values.es.ssl.keystore.keys }}
            {{- end }}
        {{- end }}
        index: {{ .Values.es.index }}
        {{- with .Values.es.settings }}
        settings:
          {{ toYaml . | nindent 10 | trim -}}
        {{- end }}
        bulk:
          actions: 1000           # Number of requests action before flush
          flush_interval: 5       # Flush interval in seconds

      {{- range $key, $value := .Values.gateway.reporters }}
      {{- if ne $key "elasticsearch"}}
      {{ $key }}:
{{ toYaml $value | indent 8 }}
      {{- end }}
      {{- end }}

    services:
      core:
        http:
          enabled: {{ .Values.gateway.services.core.http.enabled }}
          port: {{ .Values.gateway.services.core.http.port | default "18082" }}
          host: {{ .Values.gateway.services.core.http.host | default "localhost" }}
          authentication:
            type: {{ .Values.gateway.services.core.http.authentication.type | default "basic" }}
            users:
              admin: {{ .Values.gateway.services.core.http.authentication.password | default "adminadmin" }}
          secured: {{ .Values.gateway.services.core.http.secured | default false }}
          {{- if (eq .Values.gateway.services.core.http.secured true) }}
          ssl:
            keystore:
              type: {{ .Values.gateway.services.core.http.ssl.keystore.type }}
              path: {{ .Values.gateway.services.core.http.ssl.keystore.path }}
              password: {{ .Values.gateway.services.core.http.ssl.keystore.password }}
          {{- end }}

      sync: {{ toYaml .Values.gateway.services.sync | nindent 8 }}

      # Service used to store and cache api-keys from the management repository to avoid direct repository communication
      # while serving requests.
      apikeyscache:
        delay: 10000
        unit: MILLISECONDS
        threads: 3 # Threads core size used to retrieve api-keys from repository.

      # Local registry service.
      # This registry is used to load API Definition with json format from the file system. By doing so, you do not need
      # to configure your API using the web console or the rest API (but you need to know and understand the json descriptor
      # format to make it work....)
      local:
        enabled: false
        path: ${gravitee.home}/apis # The path to API descriptors

      # Gateway monitoring service.
      # This service retrieves metrics like os / process / jvm metrics and send them to an underlying reporting service.
      monitoring:
        delay: 5000
        unit: MILLISECONDS

      # Endpoint healthcheck service.
      healthcheck:
        threads: 3 # Threads core size used to check endpoint availability

      heartbeat: {{ toYaml .Values.gateway.services.heartbeat | nindent 8 }}

      {{- if .Values.gateway.services.bridge.enabled }}
      bridge:
        http:
          enabled: true
          port: {{ .Values.gateway.services.bridge.service.internalPort | default 18092}}
          host: {{ .Values.gateway.services.bridge.host | default "localhost" }}
          tcpKeepAlive: {{ .Values.gateway.services.bridge.tcpKeepAlive }}
          maxHeaderSize: {{ .Values.gateway.services.bridge.maxHeaderSize | default 8192 }}
          maxChunkSize: {{ .Values.gateway.services.bridge.maxChunkSize | default 8192 }}
          alpn: {{ .Values.gateway.services.bridge.alpn | default false }}
          authentication:
            {{- if .Values.gateway.services.bridge.authentication }}
{{ toYaml .Values.gateway.services.bridge.authentication | indent 12 }}
            {{- else if .Values.gateway.services.bridge.username}}
            type: basic
            users:
              {{ .Values.gateway.services.bridge.username }}: {{ .Values.gateway.services.bridge.password }}
            {{- else}}
            type: none
            {{- end }}
          {{- if .Values.gateway.services.bridge.ssl }}
          secured: {{ .Values.gateway.services.bridge.ssl.enabled }}
          ssl:
{{ toYaml .Values.gateway.services.bridge.ssl | indent 12 }}
          {{- end }}
      {{- end }}

      {{- if .Values.gateway.services.metrics }}
      metrics: {{- toYaml .Values.gateway.services.metrics | nindent 8 }}
      {{- end }}

      {{- if .Values.gateway.services.opentelemetry }}
      opentelemetry: {{- toYaml .Values.gateway.services.opentelemetry | nindent 8 }}
      {{- end }}

    {{- if or .Values.gateway.handlers }}
    handlers:
{{ toYaml .Values.gateway.handlers | indent 6 }}
    {{- end }}

    {{- if .Values.gateway.policy }}
    policy:
{{ toYaml .Values.gateway.policy | indent 6 }}
    {{ else }}
    policy:
      api-key:
        header: {{ .Values.gateway.apiKey.header }}
        param: {{ .Values.gateway.apiKey.param }}
    {{- end }}

    # Dictionaries multi tenant
    {{- if and .Values.gateway.dictionaries .Values.gateway.dictionaries.multitenant .Values.gateway.dictionaries.multitenant.enabled }}
    dictionaries:
      multi-tenant:
        enabled: true
    {{- end }}

    # Alert Engine communication
    {{- if .Values.alerts.enabled }}
    alerts:
      alert-engine-connector-ws:
        enabled: true
      alert-engine:
        enabled: true
        {{- if .Values.alerts.engines }}
        engines:
          {{ toYaml .Values.alerts.engines | nindent 10 | trim -}}
        {{- end }}
        ws:
          discovery: true
          {{- if .Values.alerts.options }}
          {{ toYaml .Values.alerts.options | nindent 10 | trim -}}
          {{- end }}
          {{- with .Values.alerts.endpoints }}
          endpoints:
            {{ toYaml . | nindent 12 | trim -}}
          {{- end }}
          {{- if (eq .Values.alerts.security.enabled true) }}
          security:
            username: {{ .Values.alerts.security.username }}
            password: {{ .Values.alerts.security.password }}
          {{- end }}
    {{- else }}
    alerts:
      alert-engine-connector-ws:
        enabled: false
    {{- end }}

    # APIs specific configuration
    api:
    {{- if .Values.gateway.dbLess }}
      validateSubscription: false
    {{- end }}
    {{- if .Values.gateway.api }}
      {{- toYaml .Values.gateway.api | nindent 6 -}}
    {{- end}}

    gracefulShutdown:
      delay: {{ .Values.gateway.gracefulShutdown.delay }}
      unit: {{ .Values.gateway.gracefulShutdown.unit }}

    # Secret Manager configuration
    {{- if .Values.secrets }}
    secrets:
      {{- toYaml .Values.secrets | nindent 6 }}
    {{- end }}

    # Old class loader behavior, false by default
    classloader:
      legacy:
        enabled: {{ .Values.gateway.classloader.legacy.enabled }}

  {{- end }}
    {{- if .Values.gateway.logging.debug }}
  logback.xml: |
    <?xml version="1.0" encoding="UTF-8"?>

    <!--
      ~ Copyright (c) 2015-2016, The Gravitee team (http://www.gravitee.io)
      ~
      ~  Licensed under the Apache License, Version 2.0 (the "License");
      ~  you may not use this file except in compliance with the License.
      ~  You may obtain a copy of the License at
      ~
      ~  http://www.apache.org/licenses/LICENSE-2.0
      ~
      ~  Unless required by applicable law or agreed to in writing, software
      ~  distributed under the License is distributed on an "AS IS" BASIS,
      ~  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      ~  See the License for the specific language governing permissions and
      ~  limitations under the License.
      -->

    <configuration>

        <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
            {{- if .Values.gateway.logging.stdout.json }}
            <encoder class="ch.qos.logback.core.encoder.LayoutWrappingEncoder">
                <layout class="ch.qos.logback.contrib.json.classic.JsonLayout">
                    <jsonFormatter
                            class="ch.qos.logback.contrib.jackson.JacksonJsonFormatter">
                    </jsonFormatter>
                    <appendLineSeparator>true</appendLineSeparator>
                    <timestampFormat>yyyy-MM-dd'T'HH:mm:ss.SSSXX</timestampFormat>
                </layout>
            </encoder>
            {{- else }}
            <!-- encoders are assigned the type
                ch.qos.logback.classic.encoder.PatternLayoutEncoder by default -->
            <encoder>
                <pattern>{{ .Values.gateway.logging.stdout.encoderPattern }}</pattern>
            </encoder>
            {{- end }}
        </appender>

        {{- if .Values.gateway.logging.file.enabled }}
        <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <file>${gravitee.home}/logs/gravitee.log</file>
{{ .Values.gateway.logging.file.rollingPolicy | indent 12 }}
            <encoder>
                <pattern>{{ .Values.gateway.logging.file.encoderPattern }}</pattern>
            </encoder>
        </appender>
        {{- end }}

        {{- if .Values.gateway.logging.file.enabled }}
        <appender name="async-file" class="ch.qos.logback.classic.AsyncAppender">
            <appender-ref ref="FILE" />
        </appender>
        {{- end }}

        <appender name="async-console" class="ch.qos.logback.classic.AsyncAppender">
            <appender-ref ref="STDOUT" />
        </appender>

        <logger name="io.gravitee" level="{{ .Values.gateway.logging.graviteeLevel }}" />
        <logger name="org.reflections" level="WARN" />
        <logger name="org.springframework" level="WARN" />
        <logger name="org.eclipse.jetty" level="{{ .Values.gateway.logging.jettyLevel }}" />
        {{- range $additionalLogger := .Values.gateway.logging.additionalLoggers }}
        <logger name="{{ $additionalLogger.name }}" level="{{ $additionalLogger.level }}" />
        {{- end }}

        <!-- Strictly speaking, the level attribute is not necessary since -->
        <!-- the level of the root level is set to DEBUG by default.       -->
        <root level="INFO">
            <appender-ref ref="async-console" />
            {{- if .Values.gateway.logging.file.enabled }}
            <appender-ref ref="async-file" />
            {{- end }}
        </root>

    </configuration>
  {{- end -}}
  {{- end -}}
